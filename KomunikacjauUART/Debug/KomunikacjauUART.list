
KomunikacjauUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000428c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800441c  0800441c  0000541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d4  080044d4  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080044d4  080044d4  000054d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044dc  080044dc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044dc  080044dc  000054dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044e0  080044e0  000054e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080044e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000068  0800454c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  0800454c  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9ab  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a38  00000000  00000000  00010a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00012480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000746  00000000  00000000  00012e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026704  00000000  00000000  00013556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b35d  00000000  00000000  00039c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9564  00000000  00000000  00044fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e51b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d9c  00000000  00000000  0012e560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001312fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004404 	.word	0x08004404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004404 	.word	0x08004404

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <is_button_pressed>:
static uint32_t line_length;
static uint8_t num;


bool is_button_pressed(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 80005c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c4:	4805      	ldr	r0, [pc, #20]	@ (80005dc <is_button_pressed+0x20>)
 80005c6:	f000 fe2b 	bl	8001220 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d101      	bne.n	80005d4 <is_button_pressed+0x18>
		return true;
 80005d0:	2301      	movs	r3, #1
 80005d2:	e000      	b.n	80005d6 <is_button_pressed+0x1a>
	}
	else {
		return false;
 80005d4:	2300      	movs	r3, #0
	}
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	48000800 	.word	0x48000800

080005e0 <num_iterator>:

void num_iterator(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

		if(is_button_pressed()){
 80005e4:	f7ff ffea 	bl	80005bc <is_button_pressed>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d01e      	beq.n	800062c <num_iterator+0x4c>
		num++;
 80005ee:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <num_iterator+0x50>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <num_iterator+0x50>)
 80005f8:	701a      	strb	r2, [r3, #0]
		if(num > 10)
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <num_iterator+0x50>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	d908      	bls.n	8000614 <num_iterator+0x34>
		{
			num = 1;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <num_iterator+0x50>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2120      	movs	r1, #32
 800060c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000610:	f000 fe1e 	bl	8001250 <HAL_GPIO_WritePin>
		}
		printf("Zmienna: %d\n ", num);
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <num_iterator+0x50>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	4806      	ldr	r0, [pc, #24]	@ (8000634 <num_iterator+0x54>)
 800061c:	f003 f886 	bl	800372c <iprintf>
		while (is_button_pressed());
 8000620:	bf00      	nop
 8000622:	f7ff ffcb 	bl	80005bc <is_button_pressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1fa      	bne.n	8000622 <num_iterator+0x42>
		}

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000164 	.word	0x20000164
 8000634:	0800441c 	.word	0x0800441c

08000638 <line_append>:

void line_append(uint8_t value)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	if(value == '\r' || value == '\n')
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b0d      	cmp	r3, #13
 8000646:	d002      	beq.n	800064e <line_append+0x16>
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b0a      	cmp	r3, #10
 800064c:	d12c      	bne.n	80006a8 <line_append+0x70>
	{
		if(line_length > 0)
 800064e:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <line_append+0x98>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d038      	beq.n	80006c8 <line_append+0x90>
		{
			line_buffer[line_length] = '\0';
 8000656:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <line_append+0x98>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a1e      	ldr	r2, [pc, #120]	@ (80006d4 <line_append+0x9c>)
 800065c:	2100      	movs	r1, #0
 800065e:	54d1      	strb	r1, [r2, r3]
			if(strcmp(line_buffer,"wlacz")==0)
 8000660:	491d      	ldr	r1, [pc, #116]	@ (80006d8 <line_append+0xa0>)
 8000662:	481c      	ldr	r0, [pc, #112]	@ (80006d4 <line_append+0x9c>)
 8000664:	f7ff fdb4 	bl	80001d0 <strcmp>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d106      	bne.n	800067c <line_append+0x44>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2120      	movs	r1, #32
 8000672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000676:	f000 fdeb 	bl	8001250 <HAL_GPIO_WritePin>
 800067a:	e011      	b.n	80006a0 <line_append+0x68>
			} else if(strcmp(line_buffer,"wylacz")==0)
 800067c:	4917      	ldr	r1, [pc, #92]	@ (80006dc <line_append+0xa4>)
 800067e:	4815      	ldr	r0, [pc, #84]	@ (80006d4 <line_append+0x9c>)
 8000680:	f7ff fda6 	bl	80001d0 <strcmp>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d106      	bne.n	8000698 <line_append+0x60>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000692:	f000 fddd 	bl	8001250 <HAL_GPIO_WritePin>
 8000696:	e003      	b.n	80006a0 <line_append+0x68>
			} else {
			printf("Nieznane polecenie: %s\n ", line_buffer);
 8000698:	490e      	ldr	r1, [pc, #56]	@ (80006d4 <line_append+0x9c>)
 800069a:	4811      	ldr	r0, [pc, #68]	@ (80006e0 <line_append+0xa8>)
 800069c:	f003 f846 	bl	800372c <iprintf>
			}
			line_length = 0;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <line_append+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
		if(line_length > 0)
 80006a6:	e00f      	b.n	80006c8 <line_append+0x90>
		}

	}
	else
	{
		if(line_length >= LINE_MAX_LENGTH) {
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <line_append+0x98>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b4f      	cmp	r3, #79	@ 0x4f
 80006ae:	d902      	bls.n	80006b6 <line_append+0x7e>
			line_length = 0;
 80006b0:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <line_append+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++] = value;
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <line_append+0x98>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	4904      	ldr	r1, [pc, #16]	@ (80006d0 <line_append+0x98>)
 80006be:	600a      	str	r2, [r1, #0]
 80006c0:	4904      	ldr	r1, [pc, #16]	@ (80006d4 <line_append+0x9c>)
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	54ca      	strb	r2, [r1, r3]
	}
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000160 	.word	0x20000160
 80006d4:	2000010c 	.word	0x2000010c
 80006d8:	0800442c 	.word	0x0800442c
 80006dc:	08004434 	.word	0x08004434
 80006e0:	0800443c 	.word	0x0800443c

080006e4 <__io_putchar>:

int __io_putchar(int ch)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(ch =='\n')
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b0a      	cmp	r3, #10
 80006f0:	d109      	bne.n	8000706 <__io_putchar+0x22>
	{
		uint8_t ch2 = '\r';
 80006f2:	230d      	movs	r3, #13
 80006f4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 80006f6:	f107 010f 	add.w	r1, r7, #15
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	2201      	movs	r2, #1
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <__io_putchar+0x3c>)
 8000702:	f002 f92b 	bl	800295c <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000706:	1d39      	adds	r1, r7, #4
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	2201      	movs	r2, #1
 800070e:	4804      	ldr	r0, [pc, #16]	@ (8000720 <__io_putchar+0x3c>)
 8000710:	f002 f924 	bl	800295c <HAL_UART_Transmit>
	return 1;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000084 	.word	0x20000084

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072a:	f000 fa74 	bl	8000c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f817 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f000 f88f 	bl	8000854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000736:	f000 f859 	bl	80007ec <MX_USART2_UART_Init>
  while (1)
  {


	  uint8_t value;
	  if(HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK)
 800073a:	1df9      	adds	r1, r7, #7
 800073c:	2300      	movs	r3, #0
 800073e:	2201      	movs	r2, #1
 8000740:	4806      	ldr	r0, [pc, #24]	@ (800075c <main+0x38>)
 8000742:	f002 f994 	bl	8002a6e <HAL_UART_Receive>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d103      	bne.n	8000754 <main+0x30>
		 line_append(value);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff72 	bl	8000638 <line_append>
	  num_iterator();
 8000754:	f7ff ff44 	bl	80005e0 <num_iterator>
  {
 8000758:	e7ef      	b.n	800073a <main+0x16>
 800075a:	bf00      	nop
 800075c:	20000084 	.word	0x20000084

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b096      	sub	sp, #88	@ 0x58
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2244      	movs	r2, #68	@ 0x44
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 f831 	bl	80037d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000782:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000786:	f000 fd89 	bl	800129c <HAL_PWREx_ControlVoltageScaling>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000790:	f000 f8ae 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000794:	2310      	movs	r3, #16
 8000796:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007a0:	2360      	movs	r3, #96	@ 0x60
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fdcb 	bl	8001348 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007b8:	f000 f89a 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 f993 	bl	8001b00 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007e0:	f000 f886 	bl	80008f0 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3758      	adds	r7, #88	@ 0x58
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_USART2_UART_Init+0x60>)
 80007f2:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <MX_USART2_UART_Init+0x64>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_USART2_UART_Init+0x60>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_USART2_UART_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_USART2_UART_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_USART2_UART_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_USART2_UART_Init+0x60>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <MX_USART2_UART_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_USART2_UART_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_USART2_UART_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_USART2_UART_Init+0x60>)
 800082a:	2210      	movs	r2, #16
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_USART2_UART_Init+0x60>)
 8000830:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000834:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_USART2_UART_Init+0x60>)
 8000838:	f002 f842 	bl	80028c0 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000842:	f000 f855 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000084 	.word	0x20000084
 8000850:	40004400 	.word	0x40004400

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_GPIO_Init+0x94>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a1e      	ldr	r2, [pc, #120]	@ (80008e8 <MX_GPIO_Init+0x94>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_GPIO_Init+0x94>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_GPIO_Init+0x94>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <MX_GPIO_Init+0x94>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_GPIO_Init+0x94>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2120      	movs	r1, #32
 800089e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a2:	f000 fcd5 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80008a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	480c      	ldr	r0, [pc, #48]	@ (80008ec <MX_GPIO_Init+0x98>)
 80008bc:	f000 fb06 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c0:	2320      	movs	r3, #32
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f000 faf7 	bl	8000ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008de:	bf00      	nop
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000800 	.word	0x48000800

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <HAL_MspInit+0x44>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6613      	str	r3, [r2, #96]	@ 0x60
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_MspInit+0x44>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6593      	str	r3, [r2, #88]	@ 0x58
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0ac      	sub	sp, #176	@ 0xb0
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2288      	movs	r2, #136	@ 0x88
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f002 ff36 	bl	80037d6 <memset>
  if(huart->Instance==USART2)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a21      	ldr	r2, [pc, #132]	@ (80009f4 <HAL_UART_MspInit+0xb0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d13b      	bne.n	80009ec <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000974:	2302      	movs	r3, #2
 8000976:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000978:	2300      	movs	r3, #0
 800097a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fae1 	bl	8001f48 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800098c:	f7ff ffb0 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000994:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 8000996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099a:	6593      	str	r3, [r2, #88]	@ 0x58
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 800099e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b4:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c0:	230c      	movs	r3, #12
 80009c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d8:	2307      	movs	r3, #7
 80009da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e8:	f000 fa70 	bl	8000ecc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ec:	bf00      	nop
 80009ee:	37b0      	adds	r7, #176	@ 0xb0
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004400 	.word	0x40004400
 80009f8:	40021000 	.word	0x40021000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <NMI_Handler+0x4>

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a52:	f000 f935 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	e00a      	b.n	8000a82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a6c:	f3af 8000 	nop.w
 8000a70:	4601      	mov	r1, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1c5a      	adds	r2, r3, #1
 8000a76:	60ba      	str	r2, [r7, #8]
 8000a78:	b2ca      	uxtb	r2, r1
 8000a7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dbf0      	blt.n	8000a6c <_read+0x12>
  }

  return len;
 8000a8a:	687b      	ldr	r3, [r7, #4]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e009      	b.n	8000aba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	60ba      	str	r2, [r7, #8]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fe18 	bl	80006e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	dbf1      	blt.n	8000aa6 <_write+0x12>
  }
  return len;
 8000ac2:	687b      	ldr	r3, [r7, #4]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_close>:

int _close(int file)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af4:	605a      	str	r2, [r3, #4]
  return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_isatty>:

int _isatty(int file)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0c:	2301      	movs	r3, #1
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f002 fe86 	bl	8003874 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20018000 	.word	0x20018000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000168 	.word	0x20000168
 8000b9c:	200002c0 	.word	0x200002c0

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ffea 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f002 fe45 	bl	8003880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fd95 	bl	8000724 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c08:	080044e4 	.word	0x080044e4
  ldr r2, =_sbss
 8000c0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c10:	200002bc 	.word	0x200002bc

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>

08000c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f91f 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c26:	200f      	movs	r0, #15
 8000c28:	f000 f80e 	bl	8000c48 <HAL_InitTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e001      	b.n	8000c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c38:	f7ff fe60 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <HAL_InitTick+0x6c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d023      	beq.n	8000ca4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c5c:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <HAL_InitTick+0x70>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <HAL_InitTick+0x6c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f91d 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10f      	bne.n	8000c9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d809      	bhi.n	8000c98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f8f5 	bl	8000e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c90:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <HAL_InitTick+0x74>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e007      	b.n	8000ca8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e004      	b.n	8000ca8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	e001      	b.n	8000ca8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	2000016c 	.word	0x2000016c

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000016c 	.word	0x2000016c

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	@ (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	@ (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	@ 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff8e 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff47 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff5c 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff8e 	bl	8000db8 <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5d 	bl	8000d64 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffb0 	bl	8000e20 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eda:	e17f      	b.n	80011dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 8171 	beq.w	80011d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d005      	beq.n	8000f0c <HAL_GPIO_Init+0x40>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d130      	bne.n	8000f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	f003 0201 	and.w	r2, r3, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d118      	bne.n	8000fac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	6939      	ldr	r1, [r7, #16]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80ac 	beq.w	80011d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	4b5f      	ldr	r3, [pc, #380]	@ (80011fc <HAL_GPIO_Init+0x330>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001082:	4a5e      	ldr	r2, [pc, #376]	@ (80011fc <HAL_GPIO_Init+0x330>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6613      	str	r3, [r2, #96]	@ 0x60
 800108a:	4b5c      	ldr	r3, [pc, #368]	@ (80011fc <HAL_GPIO_Init+0x330>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001096:	4a5a      	ldr	r2, [pc, #360]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010c0:	d025      	beq.n	800110e <HAL_GPIO_Init+0x242>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001204 <HAL_GPIO_Init+0x338>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d01f      	beq.n	800110a <HAL_GPIO_Init+0x23e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001208 <HAL_GPIO_Init+0x33c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x23a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4d      	ldr	r2, [pc, #308]	@ (800120c <HAL_GPIO_Init+0x340>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x236>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001210 <HAL_GPIO_Init+0x344>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x232>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001214 <HAL_GPIO_Init+0x348>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x22e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001218 <HAL_GPIO_Init+0x34c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x22a>
 80010f2:	2306      	movs	r3, #6
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x244>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x244>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x244>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x244>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x244>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x244>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x244>
 800110e:	2300      	movs	r3, #0
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001120:	4937      	ldr	r1, [pc, #220]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800112e:	4b3b      	ldr	r3, [pc, #236]	@ (800121c <HAL_GPIO_Init+0x350>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001152:	4a32      	ldr	r2, [pc, #200]	@ (800121c <HAL_GPIO_Init+0x350>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001158:	4b30      	ldr	r3, [pc, #192]	@ (800121c <HAL_GPIO_Init+0x350>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800117c:	4a27      	ldr	r2, [pc, #156]	@ (800121c <HAL_GPIO_Init+0x350>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <HAL_GPIO_Init+0x350>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a6:	4a1d      	ldr	r2, [pc, #116]	@ (800121c <HAL_GPIO_Init+0x350>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <HAL_GPIO_Init+0x350>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011d0:	4a12      	ldr	r2, [pc, #72]	@ (800121c <HAL_GPIO_Init+0x350>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa22 f303 	lsr.w	r3, r2, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f47f ae78 	bne.w	8000edc <HAL_GPIO_Init+0x10>
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800
 800120c:	48000c00 	.word	0x48000c00
 8001210:	48001000 	.word	0x48001000
 8001214:	48001400 	.word	0x48001400
 8001218:	48001800 	.word	0x48001800
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e001      	b.n	8001242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800126c:	e002      	b.n	8001274 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <HAL_PWREx_GetVoltageRange+0x18>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007000 	.word	0x40007000

0800129c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012aa:	d130      	bne.n	800130e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ac:	4b23      	ldr	r3, [pc, #140]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012b8:	d038      	beq.n	800132c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012c2:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2232      	movs	r2, #50	@ 0x32
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0c9b      	lsrs	r3, r3, #18
 80012dc:	3301      	adds	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e0:	e002      	b.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f4:	d102      	bne.n	80012fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f2      	bne.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001308:	d110      	bne.n	800132c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e00f      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131a:	d007      	beq.n	800132c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001324:	4a05      	ldr	r2, [pc, #20]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800132a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007000 	.word	0x40007000
 8001340:	20000000 	.word	0x20000000
 8001344:	431bde83 	.word	0x431bde83

08001348 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e3ca      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135a:	4b97      	ldr	r3, [pc, #604]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001364:	4b94      	ldr	r3, [pc, #592]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80e4 	beq.w	8001544 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <HAL_RCC_OscConfig+0x4a>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b0c      	cmp	r3, #12
 8001386:	f040 808b 	bne.w	80014a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	f040 8087 	bne.w	80014a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001392:	4b89      	ldr	r3, [pc, #548]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x62>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e3a2      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1a      	ldr	r2, [r3, #32]
 80013ae:	4b82      	ldr	r3, [pc, #520]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <HAL_RCC_OscConfig+0x7c>
 80013ba:	4b7f      	ldr	r3, [pc, #508]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013c2:	e005      	b.n	80013d0 <HAL_RCC_OscConfig+0x88>
 80013c4:	4b7c      	ldr	r3, [pc, #496]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d223      	bcs.n	800141c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fd55 	bl	8001e88 <RCC_SetFlashLatencyFromMSIRange>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e383      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e8:	4b73      	ldr	r3, [pc, #460]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a72      	ldr	r2, [pc, #456]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b70      	ldr	r3, [pc, #448]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	496d      	ldr	r1, [pc, #436]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001406:	4b6c      	ldr	r3, [pc, #432]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	4968      	ldr	r1, [pc, #416]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
 800141a:	e025      	b.n	8001468 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141c:	4b66      	ldr	r3, [pc, #408]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a65      	ldr	r2, [pc, #404]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b63      	ldr	r3, [pc, #396]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4960      	ldr	r1, [pc, #384]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143a:	4b5f      	ldr	r3, [pc, #380]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	495b      	ldr	r1, [pc, #364]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d109      	bne.n	8001468 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fd15 	bl	8001e88 <RCC_SetFlashLatencyFromMSIRange>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e343      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001468:	f000 fc4a 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800146c:	4602      	mov	r2, r0
 800146e:	4b52      	ldr	r3, [pc, #328]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	4950      	ldr	r1, [pc, #320]	@ (80015bc <HAL_RCC_OscConfig+0x274>)
 800147a:	5ccb      	ldrb	r3, [r1, r3]
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	4a4e      	ldr	r2, [pc, #312]	@ (80015c0 <HAL_RCC_OscConfig+0x278>)
 8001486:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001488:	4b4e      	ldr	r3, [pc, #312]	@ (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fbdb 	bl	8000c48 <HAL_InitTick>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d052      	beq.n	8001542 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	e327      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d032      	beq.n	800150e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014a8:	4b43      	ldr	r3, [pc, #268]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a42      	ldr	r2, [pc, #264]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc18 	bl	8000ce8 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc14 	bl	8000ce8 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e310      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ce:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a36      	ldr	r2, [pc, #216]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4931      	ldr	r1, [pc, #196]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f8:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	492c      	ldr	r1, [pc, #176]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
 800150c:	e01a      	b.n	8001544 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150e:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800151a:	f7ff fbe5 	bl	8000ce8 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001522:	f7ff fbe1 	bl	8000ce8 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e2dd      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x1da>
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001542:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d074      	beq.n	800163a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d005      	beq.n	8001562 <HAL_RCC_OscConfig+0x21a>
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b0c      	cmp	r3, #12
 800155a:	d10e      	bne.n	800157a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d10b      	bne.n	800157a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d064      	beq.n	8001638 <HAL_RCC_OscConfig+0x2f0>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d160      	bne.n	8001638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e2ba      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x24a>
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e026      	b.n	80015e0 <HAL_RCC_OscConfig+0x298>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800159a:	d115      	bne.n	80015c8 <HAL_RCC_OscConfig+0x280>
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a02      	ldr	r2, [pc, #8]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x298>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08004458 	.word	0x08004458
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004
 80015c8:	4ba0      	ldr	r3, [pc, #640]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a9f      	ldr	r2, [pc, #636]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b9d      	ldr	r3, [pc, #628]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a9c      	ldr	r2, [pc, #624]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb7e 	bl	8000ce8 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fb7a 	bl	8000ce8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	@ 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e276      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001602:	4b92      	ldr	r3, [pc, #584]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2a8>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fb6a 	bl	8000ce8 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fb66 	bl	8000ce8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	@ 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e262      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162a:	4b88      	ldr	r3, [pc, #544]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x2d0>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d060      	beq.n	8001708 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b04      	cmp	r3, #4
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x310>
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d119      	bne.n	8001686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d116      	bne.n	8001686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001658:	4b7c      	ldr	r3, [pc, #496]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x328>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e23f      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b76      	ldr	r3, [pc, #472]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	4973      	ldr	r1, [pc, #460]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	e040      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d023      	beq.n	80016d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168e:	4b6f      	ldr	r3, [pc, #444]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6e      	ldr	r2, [pc, #440]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fb25 	bl	8000ce8 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fb21 	bl	8000ce8 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e21d      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b4:	4b65      	ldr	r3, [pc, #404]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b62      	ldr	r3, [pc, #392]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	495f      	ldr	r1, [pc, #380]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
 80016d4:	e018      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b5d      	ldr	r3, [pc, #372]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5c      	ldr	r2, [pc, #368]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb01 	bl	8000ce8 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fafd 	bl	8000ce8 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1f9      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fc:	4b53      	ldr	r3, [pc, #332]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d03c      	beq.n	800178e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01c      	beq.n	8001756 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171c:	4b4b      	ldr	r3, [pc, #300]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001722:	4a4a      	ldr	r2, [pc, #296]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff fadc 	bl	8000ce8 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff fad8 	bl	8000ce8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1d4      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001746:	4b41      	ldr	r3, [pc, #260]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ef      	beq.n	8001734 <HAL_RCC_OscConfig+0x3ec>
 8001754:	e01b      	b.n	800178e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001756:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175c:	4a3b      	ldr	r2, [pc, #236]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff fabf 	bl	8000ce8 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fabb 	bl	8000ce8 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1b7      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001780:	4b32      	ldr	r3, [pc, #200]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ef      	bne.n	800176e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80a6 	beq.w	80018e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017a0:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10d      	bne.n	80017c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	4a26      	ldr	r2, [pc, #152]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b8:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d118      	bne.n	8001806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fa82 	bl	8000ce8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e8:	f7ff fa7e 	bl	8000ce8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e17a      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d108      	bne.n	8001820 <HAL_RCC_OscConfig+0x4d8>
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001814:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800181e:	e029      	b.n	8001874 <HAL_RCC_OscConfig+0x52c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d115      	bne.n	8001854 <HAL_RCC_OscConfig+0x50c>
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182e:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	4a03      	ldr	r2, [pc, #12]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x52c>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	4b9c      	ldr	r3, [pc, #624]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001864:	4b98      	ldr	r3, [pc, #608]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186a:	4a97      	ldr	r2, [pc, #604]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d016      	beq.n	80018aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fa34 	bl	8000ce8 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001882:	e00a      	b.n	800189a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fa30 	bl	8000ce8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e12a      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ed      	beq.n	8001884 <HAL_RCC_OscConfig+0x53c>
 80018a8:	e015      	b.n	80018d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa1d 	bl	8000ce8 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fa19 	bl	8000ce8 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e113      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ed      	bne.n	80018b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	4a79      	ldr	r2, [pc, #484]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80018e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80fe 	beq.w	8001aee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	f040 80d0 	bne.w	8001a9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018fc:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	429a      	cmp	r2, r3
 800190e:	d130      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	3b01      	subs	r3, #1
 800191c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d127      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d11f      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800193c:	2a07      	cmp	r2, #7
 800193e:	bf14      	ite	ne
 8001940:	2201      	movne	r2, #1
 8001942:	2200      	moveq	r2, #0
 8001944:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001946:	4293      	cmp	r3, r2
 8001948:	d113      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	085b      	lsrs	r3, r3, #1
 8001956:	3b01      	subs	r3, #1
 8001958:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d109      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	3b01      	subs	r3, #1
 800196c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d06e      	beq.n	8001a50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d069      	beq.n	8001a4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001978:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001984:	4b50      	ldr	r3, [pc, #320]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0ad      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001994:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800199a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019a0:	f7ff f9a2 	bl	8000ce8 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff f99e 	bl	8000ce8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e09a      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ba:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c6:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	4b40      	ldr	r3, [pc, #256]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019d6:	3a01      	subs	r2, #1
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019e0:	0212      	lsls	r2, r2, #8
 80019e2:	4311      	orrs	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019e8:	0852      	lsrs	r2, r2, #1
 80019ea:	3a01      	subs	r2, #1
 80019ec:	0552      	lsls	r2, r2, #21
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019f4:	0852      	lsrs	r2, r2, #1
 80019f6:	3a01      	subs	r2, #1
 80019f8:	0652      	lsls	r2, r2, #25
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a00:	0912      	lsrs	r2, r2, #4
 8001a02:	0452      	lsls	r2, r2, #17
 8001a04:	430a      	orrs	r2, r1
 8001a06:	4930      	ldr	r1, [pc, #192]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a24:	f7ff f960 	bl	8000ce8 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff f95c 	bl	8000ce8 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e058      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4a:	e050      	b.n	8001aee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e04f      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d148      	bne.n	8001aee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a68:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a74:	f7ff f938 	bl	8000ce8 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff f934 	bl	8000ce8 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e030      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x734>
 8001a9a:	e028      	b.n	8001aee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d023      	beq.n	8001aea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff f91b 	bl	8000ce8 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	e00c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff f917 	bl	8000ce8 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d905      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e013      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_RCC_OscConfig+0x7b0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ec      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_RCC_OscConfig+0x7b0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4905      	ldr	r1, [pc, #20]	@ (8001af8 <HAL_RCC_OscConfig+0x7b0>)
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_RCC_OscConfig+0x7b4>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e001      	b.n	8001aee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	feeefffc 	.word	0xfeeefffc

08001b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0e7      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b14:	4b75      	ldr	r3, [pc, #468]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d910      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b72      	ldr	r3, [pc, #456]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 0207 	bic.w	r2, r3, #7
 8001b2a:	4970      	ldr	r1, [pc, #448]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b6e      	ldr	r3, [pc, #440]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0cf      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d010      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4b66      	ldr	r3, [pc, #408]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d908      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b63      	ldr	r3, [pc, #396]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4960      	ldr	r1, [pc, #384]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d04c      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d121      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0a6      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9e:	4b54      	ldr	r3, [pc, #336]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d115      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e09a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e08e      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e086      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bd6:	4b46      	ldr	r3, [pc, #280]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f023 0203 	bic.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4943      	ldr	r1, [pc, #268]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be8:	f7ff f87e 	bl	8000ce8 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7ff f87a 	bl	8000ce8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e06e      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 020c 	and.w	r2, r3, #12
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1eb      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d208      	bcs.n	8001c46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	492b      	ldr	r1, [pc, #172]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c46:	4b29      	ldr	r3, [pc, #164]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d210      	bcs.n	8001c76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c54:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 0207 	bic.w	r2, r3, #7
 8001c5c:	4923      	ldr	r1, [pc, #140]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c64:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e036      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	4918      	ldr	r1, [pc, #96]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4910      	ldr	r1, [pc, #64]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb4:	f000 f824 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	490b      	ldr	r1, [pc, #44]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_ClockConfig+0x1fc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe ffb5 	bl	8000c48 <HAL_InitTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08004458 	.word	0x08004458
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d18:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x34>
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d121      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d11e      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d34:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d40:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	e004      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d134      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d003      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0xac>
 8001da4:	e005      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001da8:	617b      	str	r3, [r7, #20]
      break;
 8001daa:	e005      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dae:	617b      	str	r3, [r7, #20]
      break;
 8001db0:	e002      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	617b      	str	r3, [r7, #20]
      break;
 8001db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	0e5b      	lsrs	r3, r3, #25
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	3301      	adds	r3, #1
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001df8:	69bb      	ldr	r3, [r7, #24]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08004470 	.word	0x08004470
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	007a1200 	.word	0x007a1200

08001e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4904      	ldr	r1, [pc, #16]	@ (8001e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08004468 	.word	0x08004468

08001e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e60:	f7ff ffda 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0adb      	lsrs	r3, r3, #11
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4904      	ldr	r1, [pc, #16]	@ (8001e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08004468 	.word	0x08004468

08001e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ea0:	f7ff f9ee 	bl	8001280 <HAL_PWREx_GetVoltageRange>
 8001ea4:	6178      	str	r0, [r7, #20]
 8001ea6:	e014      	b.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eac:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec0:	f7ff f9de 	bl	8001280 <HAL_PWREx_GetVoltageRange>
 8001ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ed8:	d10b      	bne.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d919      	bls.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ee4:	d902      	bls.n	8001eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e013      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eec:	2301      	movs	r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e010      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b80      	cmp	r3, #128	@ 0x80
 8001ef6:	d902      	bls.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ef8:	2303      	movs	r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e00a      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b80      	cmp	r3, #128	@ 0x80
 8001f02:	d102      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f04:	2302      	movs	r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e004      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b70      	cmp	r3, #112	@ 0x70
 8001f0e:	d101      	bne.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f10:	2301      	movs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0207 	bic.w	r2, r3, #7
 8001f1c:	4909      	ldr	r1, [pc, #36]	@ (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f24:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40022000 	.word	0x40022000

08001f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f50:	2300      	movs	r3, #0
 8001f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f54:	2300      	movs	r3, #0
 8001f56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d041      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f6c:	d02a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f72:	d824      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f78:	d008      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f7e:	d81e      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f88:	d010      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f8c:	4b86      	ldr	r3, [pc, #536]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a85      	ldr	r2, [pc, #532]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f98:	e015      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fabb 	bl	800251c <RCCEx_PLLSAI1_Config>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001faa:	e00c      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3320      	adds	r3, #32
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fba6 	bl	8002704 <RCCEx_PLLSAI2_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fbc:	e003      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fcc:	4b76      	ldr	r3, [pc, #472]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fda:	4973      	ldr	r1, [pc, #460]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fe2:	e001      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d041      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ff8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ffc:	d02a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ffe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002002:	d824      	bhi.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002004:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002008:	d008      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800200a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800200e:	d81e      	bhi.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002018:	d010      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800201a:	e018      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800201c:	4b62      	ldr	r3, [pc, #392]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a61      	ldr	r2, [pc, #388]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002026:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002028:	e015      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fa73 	bl	800251c <RCCEx_PLLSAI1_Config>
 8002036:	4603      	mov	r3, r0
 8002038:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800203a:	e00c      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3320      	adds	r3, #32
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fb5e 	bl	8002704 <RCCEx_PLLSAI2_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800204c:	e003      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	74fb      	strb	r3, [r7, #19]
      break;
 8002052:	e000      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002056:	7cfb      	ldrb	r3, [r7, #19]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10b      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800205c:	4b52      	ldr	r3, [pc, #328]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800206a:	494f      	ldr	r1, [pc, #316]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002072:	e001      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a0 	beq.w	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800208a:	4b47      	ldr	r3, [pc, #284]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800209a:	2300      	movs	r3, #0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00d      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b41      	ldr	r3, [pc, #260]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	4a40      	ldr	r2, [pc, #256]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ac:	4b3e      	ldr	r3, [pc, #248]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b8:	2301      	movs	r3, #1
 80020ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020bc:	4b3b      	ldr	r3, [pc, #236]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3a      	ldr	r2, [pc, #232]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c8:	f7fe fe0e 	bl	8000ce8 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ce:	e009      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d0:	f7fe fe0a 	bl	8000ce8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d902      	bls.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	74fb      	strb	r3, [r7, #19]
        break;
 80020e2:	e005      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020e4:	4b31      	ldr	r3, [pc, #196]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d15c      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020f6:	4b2c      	ldr	r3, [pc, #176]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002100:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01f      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	d019      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002114:	4b24      	ldr	r3, [pc, #144]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800211e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002126:	4a20      	ldr	r2, [pc, #128]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002136:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002140:	4a19      	ldr	r2, [pc, #100]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7fe fdc9 	bl	8000ce8 <HAL_GetTick>
 8002156:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002158:	e00b      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe fdc5 	bl	8000ce8 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d902      	bls.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	74fb      	strb	r3, [r7, #19]
            break;
 8002170:	e006      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ec      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002196:	4904      	ldr	r1, [pc, #16]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800219e:	e009      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	74bb      	strb	r3, [r7, #18]
 80021a4:	e006      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b4:	7c7b      	ldrb	r3, [r7, #17]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	4a9d      	ldr	r2, [pc, #628]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d2:	4b98      	ldr	r3, [pc, #608]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d8:	f023 0203 	bic.w	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e0:	4994      	ldr	r1, [pc, #592]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f023 020c 	bic.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002202:	498c      	ldr	r1, [pc, #560]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002216:	4b87      	ldr	r3, [pc, #540]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	4983      	ldr	r1, [pc, #524]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002238:	4b7e      	ldr	r3, [pc, #504]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	497b      	ldr	r1, [pc, #492]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800225a:	4b76      	ldr	r3, [pc, #472]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	4972      	ldr	r1, [pc, #456]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800227c:	4b6d      	ldr	r3, [pc, #436]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	496a      	ldr	r1, [pc, #424]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800229e:	4b65      	ldr	r3, [pc, #404]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	4961      	ldr	r1, [pc, #388]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	4959      	ldr	r1, [pc, #356]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022e2:	4b54      	ldr	r3, [pc, #336]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f0:	4950      	ldr	r1, [pc, #320]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002304:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002312:	4948      	ldr	r1, [pc, #288]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002326:	4b43      	ldr	r3, [pc, #268]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	493f      	ldr	r1, [pc, #252]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d028      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002348:	4b3a      	ldr	r3, [pc, #232]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002356:	4937      	ldr	r1, [pc, #220]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002366:	d106      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002368:	4b32      	ldr	r3, [pc, #200]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a31      	ldr	r2, [pc, #196]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002372:	60d3      	str	r3, [r2, #12]
 8002374:	e011      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800237a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800237e:	d10c      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	2101      	movs	r1, #1
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f8c8 	bl	800251c <RCCEx_PLLSAI1_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023a6:	4b23      	ldr	r3, [pc, #140]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b4:	491f      	ldr	r1, [pc, #124]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d0:	60d3      	str	r3, [r2, #12]
 80023d2:	e011      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2101      	movs	r1, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f899 	bl	800251c <RCCEx_PLLSAI1_Config>
 80023ea:	4603      	mov	r3, r0
 80023ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02b      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002422:	d109      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a02      	ldr	r2, [pc, #8]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]
 8002430:	e014      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f867 	bl	800251c <RCCEx_PLLSAI1_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02f      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002468:	4b2b      	ldr	r3, [pc, #172]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002476:	4928      	ldr	r1, [pc, #160]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002486:	d10d      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	2102      	movs	r1, #2
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f844 	bl	800251c <RCCEx_PLLSAI1_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d014      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	74bb      	strb	r3, [r7, #18]
 80024a2:	e011      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3320      	adds	r3, #32
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f925 	bl	8002704 <RCCEx_PLLSAI2_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024d4:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024e2:	490d      	ldr	r1, [pc, #52]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024f6:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002506:	4904      	ldr	r1, [pc, #16]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800250e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800252a:	4b75      	ldr	r3, [pc, #468]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d018      	beq.n	8002568 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002536:	4b72      	ldr	r3, [pc, #456]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d10d      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
       ||
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800254e:	4b6c      	ldr	r3, [pc, #432]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
       ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d047      	beq.n	80025f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e044      	b.n	80025f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d018      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0x86>
 8002570:	2b03      	cmp	r3, #3
 8002572:	d825      	bhi.n	80025c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002574:	2b01      	cmp	r3, #1
 8002576:	d002      	beq.n	800257e <RCCEx_PLLSAI1_Config+0x62>
 8002578:	2b02      	cmp	r3, #2
 800257a:	d009      	beq.n	8002590 <RCCEx_PLLSAI1_Config+0x74>
 800257c:	e020      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800257e:	4b60      	ldr	r3, [pc, #384]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d11d      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258e:	e01a      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002590:	4b5b      	ldr	r3, [pc, #364]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d116      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a0:	e013      	b.n	80025ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025a2:	4b57      	ldr	r3, [pc, #348]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ae:	4b54      	ldr	r3, [pc, #336]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025be:	e006      	b.n	80025ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e004      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c6:	bf00      	nop
 80025c8:	e002      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ca:	bf00      	nop
 80025cc:	e000      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10d      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	430b      	orrs	r3, r1
 80025ec:	4944      	ldr	r1, [pc, #272]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d17d      	bne.n	80026f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025f8:	4b41      	ldr	r3, [pc, #260]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a40      	ldr	r2, [pc, #256]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe fb70 	bl	8000ce8 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800260a:	e009      	b.n	8002620 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800260c:	f7fe fb6c 	bl	8000ce8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d902      	bls.n	8002620 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	73fb      	strb	r3, [r7, #15]
        break;
 800261e:	e005      	b.n	800262c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002620:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ef      	bne.n	800260c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d160      	bne.n	80026f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d111      	bne.n	800265c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002638:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6892      	ldr	r2, [r2, #8]
 8002648:	0211      	lsls	r1, r2, #8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68d2      	ldr	r2, [r2, #12]
 800264e:	0912      	lsrs	r2, r2, #4
 8002650:	0452      	lsls	r2, r2, #17
 8002652:	430a      	orrs	r2, r1
 8002654:	492a      	ldr	r1, [pc, #168]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	610b      	str	r3, [r1, #16]
 800265a:	e027      	b.n	80026ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d112      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002662:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800266a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6892      	ldr	r2, [r2, #8]
 8002672:	0211      	lsls	r1, r2, #8
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6912      	ldr	r2, [r2, #16]
 8002678:	0852      	lsrs	r2, r2, #1
 800267a:	3a01      	subs	r2, #1
 800267c:	0552      	lsls	r2, r2, #21
 800267e:	430a      	orrs	r2, r1
 8002680:	491f      	ldr	r1, [pc, #124]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	610b      	str	r3, [r1, #16]
 8002686:	e011      	b.n	80026ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002690:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6892      	ldr	r2, [r2, #8]
 8002698:	0211      	lsls	r1, r2, #8
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6952      	ldr	r2, [r2, #20]
 800269e:	0852      	lsrs	r2, r2, #1
 80026a0:	3a01      	subs	r2, #1
 80026a2:	0652      	lsls	r2, r2, #25
 80026a4:	430a      	orrs	r2, r1
 80026a6:	4916      	ldr	r1, [pc, #88]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a13      	ldr	r2, [pc, #76]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fb16 	bl	8000ce8 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026be:	e009      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c0:	f7fe fb12 	bl	8000ce8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d902      	bls.n	80026d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	73fb      	strb	r3, [r7, #15]
          break;
 80026d2:	e005      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ef      	beq.n	80026c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4904      	ldr	r1, [pc, #16]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002712:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d018      	beq.n	8002750 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800271e:	4b67      	ldr	r3, [pc, #412]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d10d      	bne.n	800274a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
       ||
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002736:	4b61      	ldr	r3, [pc, #388]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
       ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d047      	beq.n	80027da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e044      	b.n	80027da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d018      	beq.n	800278a <RCCEx_PLLSAI2_Config+0x86>
 8002758:	2b03      	cmp	r3, #3
 800275a:	d825      	bhi.n	80027a8 <RCCEx_PLLSAI2_Config+0xa4>
 800275c:	2b01      	cmp	r3, #1
 800275e:	d002      	beq.n	8002766 <RCCEx_PLLSAI2_Config+0x62>
 8002760:	2b02      	cmp	r3, #2
 8002762:	d009      	beq.n	8002778 <RCCEx_PLLSAI2_Config+0x74>
 8002764:	e020      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002766:	4b55      	ldr	r3, [pc, #340]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d11d      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002776:	e01a      	b.n	80027ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002778:	4b50      	ldr	r3, [pc, #320]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e013      	b.n	80027b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800278a:	4b4c      	ldr	r3, [pc, #304]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002796:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027a6:	e006      	b.n	80027b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e004      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027be:	4b3f      	ldr	r3, [pc, #252]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	430b      	orrs	r3, r1
 80027d4:	4939      	ldr	r1, [pc, #228]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d167      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a35      	ldr	r2, [pc, #212]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fa7c 	bl	8000ce8 <HAL_GetTick>
 80027f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027f2:	e009      	b.n	8002808 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027f4:	f7fe fa78 	bl	8000ce8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d902      	bls.n	8002808 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	73fb      	strb	r3, [r7, #15]
        break;
 8002806:	e005      	b.n	8002814 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002808:	4b2c      	ldr	r3, [pc, #176]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ef      	bne.n	80027f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d14a      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d111      	bne.n	8002844 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002820:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6892      	ldr	r2, [r2, #8]
 8002830:	0211      	lsls	r1, r2, #8
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	0912      	lsrs	r2, r2, #4
 8002838:	0452      	lsls	r2, r2, #17
 800283a:	430a      	orrs	r2, r1
 800283c:	491f      	ldr	r1, [pc, #124]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	614b      	str	r3, [r1, #20]
 8002842:	e011      	b.n	8002868 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002844:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800284c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6892      	ldr	r2, [r2, #8]
 8002854:	0211      	lsls	r1, r2, #8
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6912      	ldr	r2, [r2, #16]
 800285a:	0852      	lsrs	r2, r2, #1
 800285c:	3a01      	subs	r2, #1
 800285e:	0652      	lsls	r2, r2, #25
 8002860:	430a      	orrs	r2, r1
 8002862:	4916      	ldr	r1, [pc, #88]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a13      	ldr	r2, [pc, #76]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002872:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7fe fa38 	bl	8000ce8 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800287a:	e009      	b.n	8002890 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800287c:	f7fe fa34 	bl	8000ce8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	73fb      	strb	r3, [r7, #15]
          break;
 800288e:	e005      	b.n	800289c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002890:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ef      	beq.n	800287c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4904      	ldr	r1, [pc, #16]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e040      	b.n	8002954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe f82e 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	@ 0x24
 80028ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fc32 	bl	8003170 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f977 	bl	8002c00 <UART_SetConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e01b      	b.n	8002954 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800292a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800293a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fcb1 	bl	80032b4 <UART_CheckIdleState>
 8002952:	4603      	mov	r3, r0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	@ 0x28
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002970:	2b20      	cmp	r3, #32
 8002972:	d177      	bne.n	8002a64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_UART_Transmit+0x24>
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e070      	b.n	8002a66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2221      	movs	r2, #33	@ 0x21
 8002990:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002992:	f7fe f9a9 	bl	8000ce8 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b0:	d108      	bne.n	80029c4 <HAL_UART_Transmit+0x68>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d104      	bne.n	80029c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e003      	b.n	80029cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029cc:	e02f      	b.n	8002a2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2180      	movs	r1, #128	@ 0x80
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fd13 	bl	8003404 <UART_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e03b      	b.n	8002a66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a00:	b292      	uxth	r2, r2
 8002a02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	3302      	adds	r3, #2
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e007      	b.n	8002a1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1c9      	bne.n	80029ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2140      	movs	r1, #64	@ 0x40
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fcdd 	bl	8003404 <UART_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e005      	b.n	8002a66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b08a      	sub	sp, #40	@ 0x28
 8002a72:	af02      	add	r7, sp, #8
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	603b      	str	r3, [r7, #0]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	f040 80b6 	bne.w	8002bf6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_UART_Receive+0x28>
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0ae      	b.n	8002bf8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2222      	movs	r2, #34	@ 0x22
 8002aa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe f91a 	bl	8000ce8 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	88fa      	ldrh	r2, [r7, #6]
 8002ac2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ace:	d10e      	bne.n	8002aee <HAL_UART_Receive+0x80>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_UART_Receive+0x76>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002ade:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ae2:	e02d      	b.n	8002b40 <HAL_UART_Receive+0xd2>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	22ff      	movs	r2, #255	@ 0xff
 8002ae8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002aec:	e028      	b.n	8002b40 <HAL_UART_Receive+0xd2>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10d      	bne.n	8002b12 <HAL_UART_Receive+0xa4>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_UART_Receive+0x9a>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	22ff      	movs	r2, #255	@ 0xff
 8002b02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b06:	e01b      	b.n	8002b40 <HAL_UART_Receive+0xd2>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	227f      	movs	r2, #127	@ 0x7f
 8002b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b10:	e016      	b.n	8002b40 <HAL_UART_Receive+0xd2>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b1a:	d10d      	bne.n	8002b38 <HAL_UART_Receive+0xca>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d104      	bne.n	8002b2e <HAL_UART_Receive+0xc0>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	227f      	movs	r2, #127	@ 0x7f
 8002b28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b2c:	e008      	b.n	8002b40 <HAL_UART_Receive+0xd2>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	223f      	movs	r2, #63	@ 0x3f
 8002b32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b36:	e003      	b.n	8002b40 <HAL_UART_Receive+0xd2>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002b46:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b50:	d108      	bne.n	8002b64 <HAL_UART_Receive+0xf6>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e003      	b.n	8002b6c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b6c:	e037      	b.n	8002bde <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2120      	movs	r1, #32
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fc43 	bl	8003404 <UART_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e033      	b.n	8002bf8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	8a7b      	ldrh	r3, [r7, #18]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	3302      	adds	r3, #2
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e00d      	b.n	8002bcc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	8a7b      	ldrh	r3, [r7, #18]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1c1      	bne.n	8002b6e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
  }
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c04:	b08a      	sub	sp, #40	@ 0x28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4ba4      	ldr	r3, [pc, #656]	@ (8002ec0 <UART_SetConfig+0x2c0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a99      	ldr	r2, [pc, #612]	@ (8002ec4 <UART_SetConfig+0x2c4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d004      	beq.n	8002c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a90      	ldr	r2, [pc, #576]	@ (8002ec8 <UART_SetConfig+0x2c8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d126      	bne.n	8002cd8 <UART_SetConfig+0xd8>
 8002c8a:	4b90      	ldr	r3, [pc, #576]	@ (8002ecc <UART_SetConfig+0x2cc>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d81b      	bhi.n	8002cd0 <UART_SetConfig+0xd0>
 8002c98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca0 <UART_SetConfig+0xa0>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cc1 	.word	0x08002cc1
 8002ca8:	08002cb9 	.word	0x08002cb9
 8002cac:	08002cc9 	.word	0x08002cc9
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cb6:	e116      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cbe:	e112      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cc6:	e10e      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002cc8:	2308      	movs	r3, #8
 8002cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cce:	e10a      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd6:	e106      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a7c      	ldr	r2, [pc, #496]	@ (8002ed0 <UART_SetConfig+0x2d0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d138      	bne.n	8002d54 <UART_SetConfig+0x154>
 8002ce2:	4b7a      	ldr	r3, [pc, #488]	@ (8002ecc <UART_SetConfig+0x2cc>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b0c      	cmp	r3, #12
 8002cee:	d82d      	bhi.n	8002d4c <UART_SetConfig+0x14c>
 8002cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <UART_SetConfig+0xf8>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d2d 	.word	0x08002d2d
 8002cfc:	08002d4d 	.word	0x08002d4d
 8002d00:	08002d4d 	.word	0x08002d4d
 8002d04:	08002d4d 	.word	0x08002d4d
 8002d08:	08002d3d 	.word	0x08002d3d
 8002d0c:	08002d4d 	.word	0x08002d4d
 8002d10:	08002d4d 	.word	0x08002d4d
 8002d14:	08002d4d 	.word	0x08002d4d
 8002d18:	08002d35 	.word	0x08002d35
 8002d1c:	08002d4d 	.word	0x08002d4d
 8002d20:	08002d4d 	.word	0x08002d4d
 8002d24:	08002d4d 	.word	0x08002d4d
 8002d28:	08002d45 	.word	0x08002d45
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d32:	e0d8      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002d34:	2302      	movs	r3, #2
 8002d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d3a:	e0d4      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d42:	e0d0      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002d44:	2308      	movs	r3, #8
 8002d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4a:	e0cc      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d52:	e0c8      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a5e      	ldr	r2, [pc, #376]	@ (8002ed4 <UART_SetConfig+0x2d4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d125      	bne.n	8002daa <UART_SetConfig+0x1aa>
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ecc <UART_SetConfig+0x2cc>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d68:	2b30      	cmp	r3, #48	@ 0x30
 8002d6a:	d016      	beq.n	8002d9a <UART_SetConfig+0x19a>
 8002d6c:	2b30      	cmp	r3, #48	@ 0x30
 8002d6e:	d818      	bhi.n	8002da2 <UART_SetConfig+0x1a2>
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d00a      	beq.n	8002d8a <UART_SetConfig+0x18a>
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d814      	bhi.n	8002da2 <UART_SetConfig+0x1a2>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <UART_SetConfig+0x182>
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d008      	beq.n	8002d92 <UART_SetConfig+0x192>
 8002d80:	e00f      	b.n	8002da2 <UART_SetConfig+0x1a2>
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d88:	e0ad      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d90:	e0a9      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002d92:	2304      	movs	r3, #4
 8002d94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d98:	e0a5      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da0:	e0a1      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002da2:	2310      	movs	r3, #16
 8002da4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da8:	e09d      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed8 <UART_SetConfig+0x2d8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d125      	bne.n	8002e00 <UART_SetConfig+0x200>
 8002db4:	4b45      	ldr	r3, [pc, #276]	@ (8002ecc <UART_SetConfig+0x2cc>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002dbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002dc0:	d016      	beq.n	8002df0 <UART_SetConfig+0x1f0>
 8002dc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002dc4:	d818      	bhi.n	8002df8 <UART_SetConfig+0x1f8>
 8002dc6:	2b80      	cmp	r3, #128	@ 0x80
 8002dc8:	d00a      	beq.n	8002de0 <UART_SetConfig+0x1e0>
 8002dca:	2b80      	cmp	r3, #128	@ 0x80
 8002dcc:	d814      	bhi.n	8002df8 <UART_SetConfig+0x1f8>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <UART_SetConfig+0x1d8>
 8002dd2:	2b40      	cmp	r3, #64	@ 0x40
 8002dd4:	d008      	beq.n	8002de8 <UART_SetConfig+0x1e8>
 8002dd6:	e00f      	b.n	8002df8 <UART_SetConfig+0x1f8>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dde:	e082      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002de0:	2302      	movs	r3, #2
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002de6:	e07e      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002de8:	2304      	movs	r3, #4
 8002dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dee:	e07a      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002df0:	2308      	movs	r3, #8
 8002df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df6:	e076      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfe:	e072      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a35      	ldr	r2, [pc, #212]	@ (8002edc <UART_SetConfig+0x2dc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d12a      	bne.n	8002e60 <UART_SetConfig+0x260>
 8002e0a:	4b30      	ldr	r3, [pc, #192]	@ (8002ecc <UART_SetConfig+0x2cc>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e18:	d01a      	beq.n	8002e50 <UART_SetConfig+0x250>
 8002e1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e1e:	d81b      	bhi.n	8002e58 <UART_SetConfig+0x258>
 8002e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e24:	d00c      	beq.n	8002e40 <UART_SetConfig+0x240>
 8002e26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e2a:	d815      	bhi.n	8002e58 <UART_SetConfig+0x258>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <UART_SetConfig+0x238>
 8002e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e34:	d008      	beq.n	8002e48 <UART_SetConfig+0x248>
 8002e36:	e00f      	b.n	8002e58 <UART_SetConfig+0x258>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3e:	e052      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002e40:	2302      	movs	r3, #2
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e46:	e04e      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4e:	e04a      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002e50:	2308      	movs	r3, #8
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e56:	e046      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5e:	e042      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a17      	ldr	r2, [pc, #92]	@ (8002ec4 <UART_SetConfig+0x2c4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d13a      	bne.n	8002ee0 <UART_SetConfig+0x2e0>
 8002e6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <UART_SetConfig+0x2cc>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e78:	d01a      	beq.n	8002eb0 <UART_SetConfig+0x2b0>
 8002e7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e7e:	d81b      	bhi.n	8002eb8 <UART_SetConfig+0x2b8>
 8002e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e84:	d00c      	beq.n	8002ea0 <UART_SetConfig+0x2a0>
 8002e86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e8a:	d815      	bhi.n	8002eb8 <UART_SetConfig+0x2b8>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <UART_SetConfig+0x298>
 8002e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e94:	d008      	beq.n	8002ea8 <UART_SetConfig+0x2a8>
 8002e96:	e00f      	b.n	8002eb8 <UART_SetConfig+0x2b8>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e9e:	e022      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ea6:	e01e      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eae:	e01a      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb6:	e016      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ebe:	e012      	b.n	8002ee6 <UART_SetConfig+0x2e6>
 8002ec0:	efff69f3 	.word	0xefff69f3
 8002ec4:	40008000 	.word	0x40008000
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40004400 	.word	0x40004400
 8002ed4:	40004800 	.word	0x40004800
 8002ed8:	40004c00 	.word	0x40004c00
 8002edc:	40005000 	.word	0x40005000
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a9f      	ldr	r2, [pc, #636]	@ (8003168 <UART_SetConfig+0x568>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d17a      	bne.n	8002fe6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d824      	bhi.n	8002f42 <UART_SetConfig+0x342>
 8002ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <UART_SetConfig+0x300>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	08002f43 	.word	0x08002f43
 8002f08:	08002f2d 	.word	0x08002f2d
 8002f0c:	08002f43 	.word	0x08002f43
 8002f10:	08002f33 	.word	0x08002f33
 8002f14:	08002f43 	.word	0x08002f43
 8002f18:	08002f43 	.word	0x08002f43
 8002f1c:	08002f43 	.word	0x08002f43
 8002f20:	08002f3b 	.word	0x08002f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f24:	f7fe ff84 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002f28:	61f8      	str	r0, [r7, #28]
        break;
 8002f2a:	e010      	b.n	8002f4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800316c <UART_SetConfig+0x56c>)
 8002f2e:	61fb      	str	r3, [r7, #28]
        break;
 8002f30:	e00d      	b.n	8002f4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f32:	f7fe fee5 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8002f36:	61f8      	str	r0, [r7, #28]
        break;
 8002f38:	e009      	b.n	8002f4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f3e:	61fb      	str	r3, [r7, #28]
        break;
 8002f40:	e005      	b.n	8002f4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80fb 	beq.w	800314c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d305      	bcc.n	8002f72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d903      	bls.n	8002f7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f78:	e0e8      	b.n	800314c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	461c      	mov	r4, r3
 8002f80:	4615      	mov	r5, r2
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	022b      	lsls	r3, r5, #8
 8002f8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f90:	0222      	lsls	r2, r4, #8
 8002f92:	68f9      	ldr	r1, [r7, #12]
 8002f94:	6849      	ldr	r1, [r1, #4]
 8002f96:	0849      	lsrs	r1, r1, #1
 8002f98:	2000      	movs	r0, #0
 8002f9a:	4688      	mov	r8, r1
 8002f9c:	4681      	mov	r9, r0
 8002f9e:	eb12 0a08 	adds.w	sl, r2, r8
 8002fa2:	eb43 0b09 	adc.w	fp, r3, r9
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb4:	4650      	mov	r0, sl
 8002fb6:	4659      	mov	r1, fp
 8002fb8:	f7fd f96a 	bl	8000290 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fca:	d308      	bcc.n	8002fde <UART_SetConfig+0x3de>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fd2:	d204      	bcs.n	8002fde <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	e0b6      	b.n	800314c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002fe4:	e0b2      	b.n	800314c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fee:	d15e      	bne.n	80030ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d828      	bhi.n	800304a <UART_SetConfig+0x44a>
 8002ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8003000 <UART_SetConfig+0x400>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	08003025 	.word	0x08003025
 8003004:	0800302d 	.word	0x0800302d
 8003008:	08003035 	.word	0x08003035
 800300c:	0800304b 	.word	0x0800304b
 8003010:	0800303b 	.word	0x0800303b
 8003014:	0800304b 	.word	0x0800304b
 8003018:	0800304b 	.word	0x0800304b
 800301c:	0800304b 	.word	0x0800304b
 8003020:	08003043 	.word	0x08003043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003024:	f7fe ff04 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8003028:	61f8      	str	r0, [r7, #28]
        break;
 800302a:	e014      	b.n	8003056 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800302c:	f7fe ff16 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8003030:	61f8      	str	r0, [r7, #28]
        break;
 8003032:	e010      	b.n	8003056 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003034:	4b4d      	ldr	r3, [pc, #308]	@ (800316c <UART_SetConfig+0x56c>)
 8003036:	61fb      	str	r3, [r7, #28]
        break;
 8003038:	e00d      	b.n	8003056 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303a:	f7fe fe61 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800303e:	61f8      	str	r0, [r7, #28]
        break;
 8003040:	e009      	b.n	8003056 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003046:	61fb      	str	r3, [r7, #28]
        break;
 8003048:	e005      	b.n	8003056 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d077      	beq.n	800314c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005a      	lsls	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	441a      	add	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d916      	bls.n	80030a6 <UART_SetConfig+0x4a6>
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307e:	d212      	bcs.n	80030a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f023 030f 	bic.w	r3, r3, #15
 8003088:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	b29a      	uxth	r2, r3
 8003096:	8afb      	ldrh	r3, [r7, #22]
 8003098:	4313      	orrs	r3, r2
 800309a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	8afa      	ldrh	r2, [r7, #22]
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	e052      	b.n	800314c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030ac:	e04e      	b.n	800314c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d827      	bhi.n	8003106 <UART_SetConfig+0x506>
 80030b6:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <UART_SetConfig+0x4bc>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030e1 	.word	0x080030e1
 80030c0:	080030e9 	.word	0x080030e9
 80030c4:	080030f1 	.word	0x080030f1
 80030c8:	08003107 	.word	0x08003107
 80030cc:	080030f7 	.word	0x080030f7
 80030d0:	08003107 	.word	0x08003107
 80030d4:	08003107 	.word	0x08003107
 80030d8:	08003107 	.word	0x08003107
 80030dc:	080030ff 	.word	0x080030ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e0:	f7fe fea6 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80030e4:	61f8      	str	r0, [r7, #28]
        break;
 80030e6:	e014      	b.n	8003112 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030e8:	f7fe feb8 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 80030ec:	61f8      	str	r0, [r7, #28]
        break;
 80030ee:	e010      	b.n	8003112 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030f0:	4b1e      	ldr	r3, [pc, #120]	@ (800316c <UART_SetConfig+0x56c>)
 80030f2:	61fb      	str	r3, [r7, #28]
        break;
 80030f4:	e00d      	b.n	8003112 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f6:	f7fe fe03 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 80030fa:	61f8      	str	r0, [r7, #28]
        break;
 80030fc:	e009      	b.n	8003112 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003102:	61fb      	str	r3, [r7, #28]
        break;
 8003104:	e005      	b.n	8003112 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003110:	bf00      	nop
    }

    if (pclk != 0U)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d019      	beq.n	800314c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	085a      	lsrs	r2, r3, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	441a      	add	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b0f      	cmp	r3, #15
 8003130:	d909      	bls.n	8003146 <UART_SetConfig+0x546>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003138:	d205      	bcs.n	8003146 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	e002      	b.n	800314c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003158:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800315c:	4618      	mov	r0, r3
 800315e:	3728      	adds	r7, #40	@ 0x28
 8003160:	46bd      	mov	sp, r7
 8003162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003166:	bf00      	nop
 8003168:	40008000 	.word	0x40008000
 800316c:	00f42400 	.word	0x00f42400

08003170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01a      	beq.n	8003286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800326e:	d10a      	bne.n	8003286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b098      	sub	sp, #96	@ 0x60
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032c4:	f7fd fd10 	bl	8000ce8 <HAL_GetTick>
 80032c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d12e      	bne.n	8003336 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e0:	2200      	movs	r2, #0
 80032e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f88c 	bl	8003404 <UART_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d021      	beq.n	8003336 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003306:	653b      	str	r3, [r7, #80]	@ 0x50
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003310:	647b      	str	r3, [r7, #68]	@ 0x44
 8003312:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003316:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800331e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e6      	bne.n	80032f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e062      	b.n	80033fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b04      	cmp	r3, #4
 8003342:	d149      	bne.n	80033d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003344:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334c:	2200      	movs	r2, #0
 800334e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f856 	bl	8003404 <UART_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d03c      	beq.n	80033d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	623b      	str	r3, [r7, #32]
   return(result);
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800337c:	633b      	str	r3, [r7, #48]	@ 0x30
 800337e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800338a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e6      	bne.n	800335e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3308      	adds	r3, #8
 8003396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	60fb      	str	r3, [r7, #12]
   return(result);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b0:	61fa      	str	r2, [r7, #28]
 80033b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	617b      	str	r3, [r7, #20]
   return(result);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e5      	bne.n	8003390 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e011      	b.n	80033fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3758      	adds	r7, #88	@ 0x58
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003414:	e04f      	b.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d04b      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341e:	f7fd fc63 	bl	8000ce8 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <UART_WaitOnFlagUntilTimeout+0x30>
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e04e      	b.n	80034d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d037      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b80      	cmp	r3, #128	@ 0x80
 800344a:	d034      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b40      	cmp	r3, #64	@ 0x40
 8003450:	d031      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b08      	cmp	r3, #8
 800345e:	d110      	bne.n	8003482 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2208      	movs	r2, #8
 8003466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f838 	bl	80034de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2208      	movs	r2, #8
 8003472:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e029      	b.n	80034d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800348c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003490:	d111      	bne.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800349a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f81e 	bl	80034de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e00f      	b.n	80034d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	bf0c      	ite	eq
 80034c6:	2301      	moveq	r3, #1
 80034c8:	2300      	movne	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d0a0      	beq.n	8003416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034de:	b480      	push	{r7}
 80034e0:	b095      	sub	sp, #84	@ 0x54
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003504:	643b      	str	r3, [r7, #64]	@ 0x40
 8003506:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800350a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e6      	bne.n	80034e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3308      	adds	r3, #8
 800351e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	61fb      	str	r3, [r7, #28]
   return(result);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3308      	adds	r3, #8
 8003536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800353a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800353e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e5      	bne.n	8003518 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003550:	2b01      	cmp	r3, #1
 8003552:	d118      	bne.n	8003586 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	60bb      	str	r3, [r7, #8]
   return(result);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f023 0310 	bic.w	r3, r3, #16
 8003568:	647b      	str	r3, [r7, #68]	@ 0x44
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6979      	ldr	r1, [r7, #20]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	613b      	str	r3, [r7, #16]
   return(result);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e6      	bne.n	8003554 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800359a:	bf00      	nop
 800359c:	3754      	adds	r7, #84	@ 0x54
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <std>:
 80035a8:	2300      	movs	r3, #0
 80035aa:	b510      	push	{r4, lr}
 80035ac:	4604      	mov	r4, r0
 80035ae:	e9c0 3300 	strd	r3, r3, [r0]
 80035b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035b6:	6083      	str	r3, [r0, #8]
 80035b8:	8181      	strh	r1, [r0, #12]
 80035ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80035bc:	81c2      	strh	r2, [r0, #14]
 80035be:	6183      	str	r3, [r0, #24]
 80035c0:	4619      	mov	r1, r3
 80035c2:	2208      	movs	r2, #8
 80035c4:	305c      	adds	r0, #92	@ 0x5c
 80035c6:	f000 f906 	bl	80037d6 <memset>
 80035ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003600 <std+0x58>)
 80035cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80035ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003604 <std+0x5c>)
 80035d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <std+0x60>)
 80035d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <std+0x64>)
 80035d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80035da:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <std+0x68>)
 80035dc:	6224      	str	r4, [r4, #32]
 80035de:	429c      	cmp	r4, r3
 80035e0:	d006      	beq.n	80035f0 <std+0x48>
 80035e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035e6:	4294      	cmp	r4, r2
 80035e8:	d002      	beq.n	80035f0 <std+0x48>
 80035ea:	33d0      	adds	r3, #208	@ 0xd0
 80035ec:	429c      	cmp	r4, r3
 80035ee:	d105      	bne.n	80035fc <std+0x54>
 80035f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f8:	f000 b966 	b.w	80038c8 <__retarget_lock_init_recursive>
 80035fc:	bd10      	pop	{r4, pc}
 80035fe:	bf00      	nop
 8003600:	08003751 	.word	0x08003751
 8003604:	08003773 	.word	0x08003773
 8003608:	080037ab 	.word	0x080037ab
 800360c:	080037cf 	.word	0x080037cf
 8003610:	20000170 	.word	0x20000170

08003614 <stdio_exit_handler>:
 8003614:	4a02      	ldr	r2, [pc, #8]	@ (8003620 <stdio_exit_handler+0xc>)
 8003616:	4903      	ldr	r1, [pc, #12]	@ (8003624 <stdio_exit_handler+0x10>)
 8003618:	4803      	ldr	r0, [pc, #12]	@ (8003628 <stdio_exit_handler+0x14>)
 800361a:	f000 b869 	b.w	80036f0 <_fwalk_sglue>
 800361e:	bf00      	nop
 8003620:	2000000c 	.word	0x2000000c
 8003624:	08004165 	.word	0x08004165
 8003628:	2000001c 	.word	0x2000001c

0800362c <cleanup_stdio>:
 800362c:	6841      	ldr	r1, [r0, #4]
 800362e:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <cleanup_stdio+0x34>)
 8003630:	4299      	cmp	r1, r3
 8003632:	b510      	push	{r4, lr}
 8003634:	4604      	mov	r4, r0
 8003636:	d001      	beq.n	800363c <cleanup_stdio+0x10>
 8003638:	f000 fd94 	bl	8004164 <_fflush_r>
 800363c:	68a1      	ldr	r1, [r4, #8]
 800363e:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <cleanup_stdio+0x38>)
 8003640:	4299      	cmp	r1, r3
 8003642:	d002      	beq.n	800364a <cleanup_stdio+0x1e>
 8003644:	4620      	mov	r0, r4
 8003646:	f000 fd8d 	bl	8004164 <_fflush_r>
 800364a:	68e1      	ldr	r1, [r4, #12]
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <cleanup_stdio+0x3c>)
 800364e:	4299      	cmp	r1, r3
 8003650:	d004      	beq.n	800365c <cleanup_stdio+0x30>
 8003652:	4620      	mov	r0, r4
 8003654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003658:	f000 bd84 	b.w	8004164 <_fflush_r>
 800365c:	bd10      	pop	{r4, pc}
 800365e:	bf00      	nop
 8003660:	20000170 	.word	0x20000170
 8003664:	200001d8 	.word	0x200001d8
 8003668:	20000240 	.word	0x20000240

0800366c <global_stdio_init.part.0>:
 800366c:	b510      	push	{r4, lr}
 800366e:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <global_stdio_init.part.0+0x30>)
 8003670:	4c0b      	ldr	r4, [pc, #44]	@ (80036a0 <global_stdio_init.part.0+0x34>)
 8003672:	4a0c      	ldr	r2, [pc, #48]	@ (80036a4 <global_stdio_init.part.0+0x38>)
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	4620      	mov	r0, r4
 8003678:	2200      	movs	r2, #0
 800367a:	2104      	movs	r1, #4
 800367c:	f7ff ff94 	bl	80035a8 <std>
 8003680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003684:	2201      	movs	r2, #1
 8003686:	2109      	movs	r1, #9
 8003688:	f7ff ff8e 	bl	80035a8 <std>
 800368c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003690:	2202      	movs	r2, #2
 8003692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003696:	2112      	movs	r1, #18
 8003698:	f7ff bf86 	b.w	80035a8 <std>
 800369c:	200002a8 	.word	0x200002a8
 80036a0:	20000170 	.word	0x20000170
 80036a4:	08003615 	.word	0x08003615

080036a8 <__sfp_lock_acquire>:
 80036a8:	4801      	ldr	r0, [pc, #4]	@ (80036b0 <__sfp_lock_acquire+0x8>)
 80036aa:	f000 b90e 	b.w	80038ca <__retarget_lock_acquire_recursive>
 80036ae:	bf00      	nop
 80036b0:	200002b1 	.word	0x200002b1

080036b4 <__sfp_lock_release>:
 80036b4:	4801      	ldr	r0, [pc, #4]	@ (80036bc <__sfp_lock_release+0x8>)
 80036b6:	f000 b909 	b.w	80038cc <__retarget_lock_release_recursive>
 80036ba:	bf00      	nop
 80036bc:	200002b1 	.word	0x200002b1

080036c0 <__sinit>:
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4604      	mov	r4, r0
 80036c4:	f7ff fff0 	bl	80036a8 <__sfp_lock_acquire>
 80036c8:	6a23      	ldr	r3, [r4, #32]
 80036ca:	b11b      	cbz	r3, 80036d4 <__sinit+0x14>
 80036cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d0:	f7ff bff0 	b.w	80036b4 <__sfp_lock_release>
 80036d4:	4b04      	ldr	r3, [pc, #16]	@ (80036e8 <__sinit+0x28>)
 80036d6:	6223      	str	r3, [r4, #32]
 80036d8:	4b04      	ldr	r3, [pc, #16]	@ (80036ec <__sinit+0x2c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f5      	bne.n	80036cc <__sinit+0xc>
 80036e0:	f7ff ffc4 	bl	800366c <global_stdio_init.part.0>
 80036e4:	e7f2      	b.n	80036cc <__sinit+0xc>
 80036e6:	bf00      	nop
 80036e8:	0800362d 	.word	0x0800362d
 80036ec:	200002a8 	.word	0x200002a8

080036f0 <_fwalk_sglue>:
 80036f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f4:	4607      	mov	r7, r0
 80036f6:	4688      	mov	r8, r1
 80036f8:	4614      	mov	r4, r2
 80036fa:	2600      	movs	r6, #0
 80036fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003700:	f1b9 0901 	subs.w	r9, r9, #1
 8003704:	d505      	bpl.n	8003712 <_fwalk_sglue+0x22>
 8003706:	6824      	ldr	r4, [r4, #0]
 8003708:	2c00      	cmp	r4, #0
 800370a:	d1f7      	bne.n	80036fc <_fwalk_sglue+0xc>
 800370c:	4630      	mov	r0, r6
 800370e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003712:	89ab      	ldrh	r3, [r5, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d907      	bls.n	8003728 <_fwalk_sglue+0x38>
 8003718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800371c:	3301      	adds	r3, #1
 800371e:	d003      	beq.n	8003728 <_fwalk_sglue+0x38>
 8003720:	4629      	mov	r1, r5
 8003722:	4638      	mov	r0, r7
 8003724:	47c0      	blx	r8
 8003726:	4306      	orrs	r6, r0
 8003728:	3568      	adds	r5, #104	@ 0x68
 800372a:	e7e9      	b.n	8003700 <_fwalk_sglue+0x10>

0800372c <iprintf>:
 800372c:	b40f      	push	{r0, r1, r2, r3}
 800372e:	b507      	push	{r0, r1, r2, lr}
 8003730:	4906      	ldr	r1, [pc, #24]	@ (800374c <iprintf+0x20>)
 8003732:	ab04      	add	r3, sp, #16
 8003734:	6808      	ldr	r0, [r1, #0]
 8003736:	f853 2b04 	ldr.w	r2, [r3], #4
 800373a:	6881      	ldr	r1, [r0, #8]
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	f000 f9e9 	bl	8003b14 <_vfiprintf_r>
 8003742:	b003      	add	sp, #12
 8003744:	f85d eb04 	ldr.w	lr, [sp], #4
 8003748:	b004      	add	sp, #16
 800374a:	4770      	bx	lr
 800374c:	20000018 	.word	0x20000018

08003750 <__sread>:
 8003750:	b510      	push	{r4, lr}
 8003752:	460c      	mov	r4, r1
 8003754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003758:	f000 f868 	bl	800382c <_read_r>
 800375c:	2800      	cmp	r0, #0
 800375e:	bfab      	itete	ge
 8003760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003762:	89a3      	ldrhlt	r3, [r4, #12]
 8003764:	181b      	addge	r3, r3, r0
 8003766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800376a:	bfac      	ite	ge
 800376c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800376e:	81a3      	strhlt	r3, [r4, #12]
 8003770:	bd10      	pop	{r4, pc}

08003772 <__swrite>:
 8003772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003776:	461f      	mov	r7, r3
 8003778:	898b      	ldrh	r3, [r1, #12]
 800377a:	05db      	lsls	r3, r3, #23
 800377c:	4605      	mov	r5, r0
 800377e:	460c      	mov	r4, r1
 8003780:	4616      	mov	r6, r2
 8003782:	d505      	bpl.n	8003790 <__swrite+0x1e>
 8003784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003788:	2302      	movs	r3, #2
 800378a:	2200      	movs	r2, #0
 800378c:	f000 f83c 	bl	8003808 <_lseek_r>
 8003790:	89a3      	ldrh	r3, [r4, #12]
 8003792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800379a:	81a3      	strh	r3, [r4, #12]
 800379c:	4632      	mov	r2, r6
 800379e:	463b      	mov	r3, r7
 80037a0:	4628      	mov	r0, r5
 80037a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037a6:	f000 b853 	b.w	8003850 <_write_r>

080037aa <__sseek>:
 80037aa:	b510      	push	{r4, lr}
 80037ac:	460c      	mov	r4, r1
 80037ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b2:	f000 f829 	bl	8003808 <_lseek_r>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	bf15      	itete	ne
 80037bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037c6:	81a3      	strheq	r3, [r4, #12]
 80037c8:	bf18      	it	ne
 80037ca:	81a3      	strhne	r3, [r4, #12]
 80037cc:	bd10      	pop	{r4, pc}

080037ce <__sclose>:
 80037ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d2:	f000 b809 	b.w	80037e8 <_close_r>

080037d6 <memset>:
 80037d6:	4402      	add	r2, r0
 80037d8:	4603      	mov	r3, r0
 80037da:	4293      	cmp	r3, r2
 80037dc:	d100      	bne.n	80037e0 <memset+0xa>
 80037de:	4770      	bx	lr
 80037e0:	f803 1b01 	strb.w	r1, [r3], #1
 80037e4:	e7f9      	b.n	80037da <memset+0x4>
	...

080037e8 <_close_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4d06      	ldr	r5, [pc, #24]	@ (8003804 <_close_r+0x1c>)
 80037ec:	2300      	movs	r3, #0
 80037ee:	4604      	mov	r4, r0
 80037f0:	4608      	mov	r0, r1
 80037f2:	602b      	str	r3, [r5, #0]
 80037f4:	f7fd f96a 	bl	8000acc <_close>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d102      	bne.n	8003802 <_close_r+0x1a>
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	b103      	cbz	r3, 8003802 <_close_r+0x1a>
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	200002ac 	.word	0x200002ac

08003808 <_lseek_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4d07      	ldr	r5, [pc, #28]	@ (8003828 <_lseek_r+0x20>)
 800380c:	4604      	mov	r4, r0
 800380e:	4608      	mov	r0, r1
 8003810:	4611      	mov	r1, r2
 8003812:	2200      	movs	r2, #0
 8003814:	602a      	str	r2, [r5, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	f7fd f97f 	bl	8000b1a <_lseek>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d102      	bne.n	8003826 <_lseek_r+0x1e>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	b103      	cbz	r3, 8003826 <_lseek_r+0x1e>
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	200002ac 	.word	0x200002ac

0800382c <_read_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4d07      	ldr	r5, [pc, #28]	@ (800384c <_read_r+0x20>)
 8003830:	4604      	mov	r4, r0
 8003832:	4608      	mov	r0, r1
 8003834:	4611      	mov	r1, r2
 8003836:	2200      	movs	r2, #0
 8003838:	602a      	str	r2, [r5, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	f7fd f90d 	bl	8000a5a <_read>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_read_r+0x1e>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b103      	cbz	r3, 800384a <_read_r+0x1e>
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	200002ac 	.word	0x200002ac

08003850 <_write_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4d07      	ldr	r5, [pc, #28]	@ (8003870 <_write_r+0x20>)
 8003854:	4604      	mov	r4, r0
 8003856:	4608      	mov	r0, r1
 8003858:	4611      	mov	r1, r2
 800385a:	2200      	movs	r2, #0
 800385c:	602a      	str	r2, [r5, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	f7fd f918 	bl	8000a94 <_write>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d102      	bne.n	800386e <_write_r+0x1e>
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	b103      	cbz	r3, 800386e <_write_r+0x1e>
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	200002ac 	.word	0x200002ac

08003874 <__errno>:
 8003874:	4b01      	ldr	r3, [pc, #4]	@ (800387c <__errno+0x8>)
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000018 	.word	0x20000018

08003880 <__libc_init_array>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	4d0d      	ldr	r5, [pc, #52]	@ (80038b8 <__libc_init_array+0x38>)
 8003884:	4c0d      	ldr	r4, [pc, #52]	@ (80038bc <__libc_init_array+0x3c>)
 8003886:	1b64      	subs	r4, r4, r5
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	2600      	movs	r6, #0
 800388c:	42a6      	cmp	r6, r4
 800388e:	d109      	bne.n	80038a4 <__libc_init_array+0x24>
 8003890:	4d0b      	ldr	r5, [pc, #44]	@ (80038c0 <__libc_init_array+0x40>)
 8003892:	4c0c      	ldr	r4, [pc, #48]	@ (80038c4 <__libc_init_array+0x44>)
 8003894:	f000 fdb6 	bl	8004404 <_init>
 8003898:	1b64      	subs	r4, r4, r5
 800389a:	10a4      	asrs	r4, r4, #2
 800389c:	2600      	movs	r6, #0
 800389e:	42a6      	cmp	r6, r4
 80038a0:	d105      	bne.n	80038ae <__libc_init_array+0x2e>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a8:	4798      	blx	r3
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7ee      	b.n	800388c <__libc_init_array+0xc>
 80038ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b2:	4798      	blx	r3
 80038b4:	3601      	adds	r6, #1
 80038b6:	e7f2      	b.n	800389e <__libc_init_array+0x1e>
 80038b8:	080044dc 	.word	0x080044dc
 80038bc:	080044dc 	.word	0x080044dc
 80038c0:	080044dc 	.word	0x080044dc
 80038c4:	080044e0 	.word	0x080044e0

080038c8 <__retarget_lock_init_recursive>:
 80038c8:	4770      	bx	lr

080038ca <__retarget_lock_acquire_recursive>:
 80038ca:	4770      	bx	lr

080038cc <__retarget_lock_release_recursive>:
 80038cc:	4770      	bx	lr
	...

080038d0 <_free_r>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4605      	mov	r5, r0
 80038d4:	2900      	cmp	r1, #0
 80038d6:	d041      	beq.n	800395c <_free_r+0x8c>
 80038d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038dc:	1f0c      	subs	r4, r1, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bfb8      	it	lt
 80038e2:	18e4      	addlt	r4, r4, r3
 80038e4:	f000 f8e0 	bl	8003aa8 <__malloc_lock>
 80038e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <_free_r+0x90>)
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	b933      	cbnz	r3, 80038fc <_free_r+0x2c>
 80038ee:	6063      	str	r3, [r4, #4]
 80038f0:	6014      	str	r4, [r2, #0]
 80038f2:	4628      	mov	r0, r5
 80038f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038f8:	f000 b8dc 	b.w	8003ab4 <__malloc_unlock>
 80038fc:	42a3      	cmp	r3, r4
 80038fe:	d908      	bls.n	8003912 <_free_r+0x42>
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	1821      	adds	r1, r4, r0
 8003904:	428b      	cmp	r3, r1
 8003906:	bf01      	itttt	eq
 8003908:	6819      	ldreq	r1, [r3, #0]
 800390a:	685b      	ldreq	r3, [r3, #4]
 800390c:	1809      	addeq	r1, r1, r0
 800390e:	6021      	streq	r1, [r4, #0]
 8003910:	e7ed      	b.n	80038ee <_free_r+0x1e>
 8003912:	461a      	mov	r2, r3
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	b10b      	cbz	r3, 800391c <_free_r+0x4c>
 8003918:	42a3      	cmp	r3, r4
 800391a:	d9fa      	bls.n	8003912 <_free_r+0x42>
 800391c:	6811      	ldr	r1, [r2, #0]
 800391e:	1850      	adds	r0, r2, r1
 8003920:	42a0      	cmp	r0, r4
 8003922:	d10b      	bne.n	800393c <_free_r+0x6c>
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	4401      	add	r1, r0
 8003928:	1850      	adds	r0, r2, r1
 800392a:	4283      	cmp	r3, r0
 800392c:	6011      	str	r1, [r2, #0]
 800392e:	d1e0      	bne.n	80038f2 <_free_r+0x22>
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	6053      	str	r3, [r2, #4]
 8003936:	4408      	add	r0, r1
 8003938:	6010      	str	r0, [r2, #0]
 800393a:	e7da      	b.n	80038f2 <_free_r+0x22>
 800393c:	d902      	bls.n	8003944 <_free_r+0x74>
 800393e:	230c      	movs	r3, #12
 8003940:	602b      	str	r3, [r5, #0]
 8003942:	e7d6      	b.n	80038f2 <_free_r+0x22>
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	1821      	adds	r1, r4, r0
 8003948:	428b      	cmp	r3, r1
 800394a:	bf04      	itt	eq
 800394c:	6819      	ldreq	r1, [r3, #0]
 800394e:	685b      	ldreq	r3, [r3, #4]
 8003950:	6063      	str	r3, [r4, #4]
 8003952:	bf04      	itt	eq
 8003954:	1809      	addeq	r1, r1, r0
 8003956:	6021      	streq	r1, [r4, #0]
 8003958:	6054      	str	r4, [r2, #4]
 800395a:	e7ca      	b.n	80038f2 <_free_r+0x22>
 800395c:	bd38      	pop	{r3, r4, r5, pc}
 800395e:	bf00      	nop
 8003960:	200002b8 	.word	0x200002b8

08003964 <sbrk_aligned>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	4e0f      	ldr	r6, [pc, #60]	@ (80039a4 <sbrk_aligned+0x40>)
 8003968:	460c      	mov	r4, r1
 800396a:	6831      	ldr	r1, [r6, #0]
 800396c:	4605      	mov	r5, r0
 800396e:	b911      	cbnz	r1, 8003976 <sbrk_aligned+0x12>
 8003970:	f000 fcb4 	bl	80042dc <_sbrk_r>
 8003974:	6030      	str	r0, [r6, #0]
 8003976:	4621      	mov	r1, r4
 8003978:	4628      	mov	r0, r5
 800397a:	f000 fcaf 	bl	80042dc <_sbrk_r>
 800397e:	1c43      	adds	r3, r0, #1
 8003980:	d103      	bne.n	800398a <sbrk_aligned+0x26>
 8003982:	f04f 34ff 	mov.w	r4, #4294967295
 8003986:	4620      	mov	r0, r4
 8003988:	bd70      	pop	{r4, r5, r6, pc}
 800398a:	1cc4      	adds	r4, r0, #3
 800398c:	f024 0403 	bic.w	r4, r4, #3
 8003990:	42a0      	cmp	r0, r4
 8003992:	d0f8      	beq.n	8003986 <sbrk_aligned+0x22>
 8003994:	1a21      	subs	r1, r4, r0
 8003996:	4628      	mov	r0, r5
 8003998:	f000 fca0 	bl	80042dc <_sbrk_r>
 800399c:	3001      	adds	r0, #1
 800399e:	d1f2      	bne.n	8003986 <sbrk_aligned+0x22>
 80039a0:	e7ef      	b.n	8003982 <sbrk_aligned+0x1e>
 80039a2:	bf00      	nop
 80039a4:	200002b4 	.word	0x200002b4

080039a8 <_malloc_r>:
 80039a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ac:	1ccd      	adds	r5, r1, #3
 80039ae:	f025 0503 	bic.w	r5, r5, #3
 80039b2:	3508      	adds	r5, #8
 80039b4:	2d0c      	cmp	r5, #12
 80039b6:	bf38      	it	cc
 80039b8:	250c      	movcc	r5, #12
 80039ba:	2d00      	cmp	r5, #0
 80039bc:	4606      	mov	r6, r0
 80039be:	db01      	blt.n	80039c4 <_malloc_r+0x1c>
 80039c0:	42a9      	cmp	r1, r5
 80039c2:	d904      	bls.n	80039ce <_malloc_r+0x26>
 80039c4:	230c      	movs	r3, #12
 80039c6:	6033      	str	r3, [r6, #0]
 80039c8:	2000      	movs	r0, #0
 80039ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003aa4 <_malloc_r+0xfc>
 80039d2:	f000 f869 	bl	8003aa8 <__malloc_lock>
 80039d6:	f8d8 3000 	ldr.w	r3, [r8]
 80039da:	461c      	mov	r4, r3
 80039dc:	bb44      	cbnz	r4, 8003a30 <_malloc_r+0x88>
 80039de:	4629      	mov	r1, r5
 80039e0:	4630      	mov	r0, r6
 80039e2:	f7ff ffbf 	bl	8003964 <sbrk_aligned>
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	4604      	mov	r4, r0
 80039ea:	d158      	bne.n	8003a9e <_malloc_r+0xf6>
 80039ec:	f8d8 4000 	ldr.w	r4, [r8]
 80039f0:	4627      	mov	r7, r4
 80039f2:	2f00      	cmp	r7, #0
 80039f4:	d143      	bne.n	8003a7e <_malloc_r+0xd6>
 80039f6:	2c00      	cmp	r4, #0
 80039f8:	d04b      	beq.n	8003a92 <_malloc_r+0xea>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	4639      	mov	r1, r7
 80039fe:	4630      	mov	r0, r6
 8003a00:	eb04 0903 	add.w	r9, r4, r3
 8003a04:	f000 fc6a 	bl	80042dc <_sbrk_r>
 8003a08:	4581      	cmp	r9, r0
 8003a0a:	d142      	bne.n	8003a92 <_malloc_r+0xea>
 8003a0c:	6821      	ldr	r1, [r4, #0]
 8003a0e:	1a6d      	subs	r5, r5, r1
 8003a10:	4629      	mov	r1, r5
 8003a12:	4630      	mov	r0, r6
 8003a14:	f7ff ffa6 	bl	8003964 <sbrk_aligned>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d03a      	beq.n	8003a92 <_malloc_r+0xea>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	442b      	add	r3, r5
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	f8d8 3000 	ldr.w	r3, [r8]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	bb62      	cbnz	r2, 8003a84 <_malloc_r+0xdc>
 8003a2a:	f8c8 7000 	str.w	r7, [r8]
 8003a2e:	e00f      	b.n	8003a50 <_malloc_r+0xa8>
 8003a30:	6822      	ldr	r2, [r4, #0]
 8003a32:	1b52      	subs	r2, r2, r5
 8003a34:	d420      	bmi.n	8003a78 <_malloc_r+0xd0>
 8003a36:	2a0b      	cmp	r2, #11
 8003a38:	d917      	bls.n	8003a6a <_malloc_r+0xc2>
 8003a3a:	1961      	adds	r1, r4, r5
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	6025      	str	r5, [r4, #0]
 8003a40:	bf18      	it	ne
 8003a42:	6059      	strne	r1, [r3, #4]
 8003a44:	6863      	ldr	r3, [r4, #4]
 8003a46:	bf08      	it	eq
 8003a48:	f8c8 1000 	streq.w	r1, [r8]
 8003a4c:	5162      	str	r2, [r4, r5]
 8003a4e:	604b      	str	r3, [r1, #4]
 8003a50:	4630      	mov	r0, r6
 8003a52:	f000 f82f 	bl	8003ab4 <__malloc_unlock>
 8003a56:	f104 000b 	add.w	r0, r4, #11
 8003a5a:	1d23      	adds	r3, r4, #4
 8003a5c:	f020 0007 	bic.w	r0, r0, #7
 8003a60:	1ac2      	subs	r2, r0, r3
 8003a62:	bf1c      	itt	ne
 8003a64:	1a1b      	subne	r3, r3, r0
 8003a66:	50a3      	strne	r3, [r4, r2]
 8003a68:	e7af      	b.n	80039ca <_malloc_r+0x22>
 8003a6a:	6862      	ldr	r2, [r4, #4]
 8003a6c:	42a3      	cmp	r3, r4
 8003a6e:	bf0c      	ite	eq
 8003a70:	f8c8 2000 	streq.w	r2, [r8]
 8003a74:	605a      	strne	r2, [r3, #4]
 8003a76:	e7eb      	b.n	8003a50 <_malloc_r+0xa8>
 8003a78:	4623      	mov	r3, r4
 8003a7a:	6864      	ldr	r4, [r4, #4]
 8003a7c:	e7ae      	b.n	80039dc <_malloc_r+0x34>
 8003a7e:	463c      	mov	r4, r7
 8003a80:	687f      	ldr	r7, [r7, #4]
 8003a82:	e7b6      	b.n	80039f2 <_malloc_r+0x4a>
 8003a84:	461a      	mov	r2, r3
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	d1fb      	bne.n	8003a84 <_malloc_r+0xdc>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	6053      	str	r3, [r2, #4]
 8003a90:	e7de      	b.n	8003a50 <_malloc_r+0xa8>
 8003a92:	230c      	movs	r3, #12
 8003a94:	6033      	str	r3, [r6, #0]
 8003a96:	4630      	mov	r0, r6
 8003a98:	f000 f80c 	bl	8003ab4 <__malloc_unlock>
 8003a9c:	e794      	b.n	80039c8 <_malloc_r+0x20>
 8003a9e:	6005      	str	r5, [r0, #0]
 8003aa0:	e7d6      	b.n	8003a50 <_malloc_r+0xa8>
 8003aa2:	bf00      	nop
 8003aa4:	200002b8 	.word	0x200002b8

08003aa8 <__malloc_lock>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	@ (8003ab0 <__malloc_lock+0x8>)
 8003aaa:	f7ff bf0e 	b.w	80038ca <__retarget_lock_acquire_recursive>
 8003aae:	bf00      	nop
 8003ab0:	200002b0 	.word	0x200002b0

08003ab4 <__malloc_unlock>:
 8003ab4:	4801      	ldr	r0, [pc, #4]	@ (8003abc <__malloc_unlock+0x8>)
 8003ab6:	f7ff bf09 	b.w	80038cc <__retarget_lock_release_recursive>
 8003aba:	bf00      	nop
 8003abc:	200002b0 	.word	0x200002b0

08003ac0 <__sfputc_r>:
 8003ac0:	6893      	ldr	r3, [r2, #8]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	b410      	push	{r4}
 8003ac8:	6093      	str	r3, [r2, #8]
 8003aca:	da08      	bge.n	8003ade <__sfputc_r+0x1e>
 8003acc:	6994      	ldr	r4, [r2, #24]
 8003ace:	42a3      	cmp	r3, r4
 8003ad0:	db01      	blt.n	8003ad6 <__sfputc_r+0x16>
 8003ad2:	290a      	cmp	r1, #10
 8003ad4:	d103      	bne.n	8003ade <__sfputc_r+0x1e>
 8003ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ada:	f000 bb6b 	b.w	80041b4 <__swbuf_r>
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	1c58      	adds	r0, r3, #1
 8003ae2:	6010      	str	r0, [r2, #0]
 8003ae4:	7019      	strb	r1, [r3, #0]
 8003ae6:	4608      	mov	r0, r1
 8003ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <__sfputs_r>:
 8003aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af0:	4606      	mov	r6, r0
 8003af2:	460f      	mov	r7, r1
 8003af4:	4614      	mov	r4, r2
 8003af6:	18d5      	adds	r5, r2, r3
 8003af8:	42ac      	cmp	r4, r5
 8003afa:	d101      	bne.n	8003b00 <__sfputs_r+0x12>
 8003afc:	2000      	movs	r0, #0
 8003afe:	e007      	b.n	8003b10 <__sfputs_r+0x22>
 8003b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b04:	463a      	mov	r2, r7
 8003b06:	4630      	mov	r0, r6
 8003b08:	f7ff ffda 	bl	8003ac0 <__sfputc_r>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d1f3      	bne.n	8003af8 <__sfputs_r+0xa>
 8003b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b14 <_vfiprintf_r>:
 8003b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b18:	460d      	mov	r5, r1
 8003b1a:	b09d      	sub	sp, #116	@ 0x74
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	4698      	mov	r8, r3
 8003b20:	4606      	mov	r6, r0
 8003b22:	b118      	cbz	r0, 8003b2c <_vfiprintf_r+0x18>
 8003b24:	6a03      	ldr	r3, [r0, #32]
 8003b26:	b90b      	cbnz	r3, 8003b2c <_vfiprintf_r+0x18>
 8003b28:	f7ff fdca 	bl	80036c0 <__sinit>
 8003b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b2e:	07d9      	lsls	r1, r3, #31
 8003b30:	d405      	bmi.n	8003b3e <_vfiprintf_r+0x2a>
 8003b32:	89ab      	ldrh	r3, [r5, #12]
 8003b34:	059a      	lsls	r2, r3, #22
 8003b36:	d402      	bmi.n	8003b3e <_vfiprintf_r+0x2a>
 8003b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b3a:	f7ff fec6 	bl	80038ca <__retarget_lock_acquire_recursive>
 8003b3e:	89ab      	ldrh	r3, [r5, #12]
 8003b40:	071b      	lsls	r3, r3, #28
 8003b42:	d501      	bpl.n	8003b48 <_vfiprintf_r+0x34>
 8003b44:	692b      	ldr	r3, [r5, #16]
 8003b46:	b99b      	cbnz	r3, 8003b70 <_vfiprintf_r+0x5c>
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	f000 fb70 	bl	8004230 <__swsetup_r>
 8003b50:	b170      	cbz	r0, 8003b70 <_vfiprintf_r+0x5c>
 8003b52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b54:	07dc      	lsls	r4, r3, #31
 8003b56:	d504      	bpl.n	8003b62 <_vfiprintf_r+0x4e>
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	b01d      	add	sp, #116	@ 0x74
 8003b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b62:	89ab      	ldrh	r3, [r5, #12]
 8003b64:	0598      	lsls	r0, r3, #22
 8003b66:	d4f7      	bmi.n	8003b58 <_vfiprintf_r+0x44>
 8003b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b6a:	f7ff feaf 	bl	80038cc <__retarget_lock_release_recursive>
 8003b6e:	e7f3      	b.n	8003b58 <_vfiprintf_r+0x44>
 8003b70:	2300      	movs	r3, #0
 8003b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b74:	2320      	movs	r3, #32
 8003b76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b7e:	2330      	movs	r3, #48	@ 0x30
 8003b80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003d30 <_vfiprintf_r+0x21c>
 8003b84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b88:	f04f 0901 	mov.w	r9, #1
 8003b8c:	4623      	mov	r3, r4
 8003b8e:	469a      	mov	sl, r3
 8003b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b94:	b10a      	cbz	r2, 8003b9a <_vfiprintf_r+0x86>
 8003b96:	2a25      	cmp	r2, #37	@ 0x25
 8003b98:	d1f9      	bne.n	8003b8e <_vfiprintf_r+0x7a>
 8003b9a:	ebba 0b04 	subs.w	fp, sl, r4
 8003b9e:	d00b      	beq.n	8003bb8 <_vfiprintf_r+0xa4>
 8003ba0:	465b      	mov	r3, fp
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f7ff ffa1 	bl	8003aee <__sfputs_r>
 8003bac:	3001      	adds	r0, #1
 8003bae:	f000 80a7 	beq.w	8003d00 <_vfiprintf_r+0x1ec>
 8003bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bb4:	445a      	add	r2, fp
 8003bb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 809f 	beq.w	8003d00 <_vfiprintf_r+0x1ec>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bcc:	f10a 0a01 	add.w	sl, sl, #1
 8003bd0:	9304      	str	r3, [sp, #16]
 8003bd2:	9307      	str	r3, [sp, #28]
 8003bd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bda:	4654      	mov	r4, sl
 8003bdc:	2205      	movs	r2, #5
 8003bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be2:	4853      	ldr	r0, [pc, #332]	@ (8003d30 <_vfiprintf_r+0x21c>)
 8003be4:	f7fc fb04 	bl	80001f0 <memchr>
 8003be8:	9a04      	ldr	r2, [sp, #16]
 8003bea:	b9d8      	cbnz	r0, 8003c24 <_vfiprintf_r+0x110>
 8003bec:	06d1      	lsls	r1, r2, #27
 8003bee:	bf44      	itt	mi
 8003bf0:	2320      	movmi	r3, #32
 8003bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bf6:	0713      	lsls	r3, r2, #28
 8003bf8:	bf44      	itt	mi
 8003bfa:	232b      	movmi	r3, #43	@ 0x2b
 8003bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c00:	f89a 3000 	ldrb.w	r3, [sl]
 8003c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c06:	d015      	beq.n	8003c34 <_vfiprintf_r+0x120>
 8003c08:	9a07      	ldr	r2, [sp, #28]
 8003c0a:	4654      	mov	r4, sl
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f04f 0c0a 	mov.w	ip, #10
 8003c12:	4621      	mov	r1, r4
 8003c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c18:	3b30      	subs	r3, #48	@ 0x30
 8003c1a:	2b09      	cmp	r3, #9
 8003c1c:	d94b      	bls.n	8003cb6 <_vfiprintf_r+0x1a2>
 8003c1e:	b1b0      	cbz	r0, 8003c4e <_vfiprintf_r+0x13a>
 8003c20:	9207      	str	r2, [sp, #28]
 8003c22:	e014      	b.n	8003c4e <_vfiprintf_r+0x13a>
 8003c24:	eba0 0308 	sub.w	r3, r0, r8
 8003c28:	fa09 f303 	lsl.w	r3, r9, r3
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	46a2      	mov	sl, r4
 8003c32:	e7d2      	b.n	8003bda <_vfiprintf_r+0xc6>
 8003c34:	9b03      	ldr	r3, [sp, #12]
 8003c36:	1d19      	adds	r1, r3, #4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	9103      	str	r1, [sp, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bfbb      	ittet	lt
 8003c40:	425b      	neglt	r3, r3
 8003c42:	f042 0202 	orrlt.w	r2, r2, #2
 8003c46:	9307      	strge	r3, [sp, #28]
 8003c48:	9307      	strlt	r3, [sp, #28]
 8003c4a:	bfb8      	it	lt
 8003c4c:	9204      	strlt	r2, [sp, #16]
 8003c4e:	7823      	ldrb	r3, [r4, #0]
 8003c50:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c52:	d10a      	bne.n	8003c6a <_vfiprintf_r+0x156>
 8003c54:	7863      	ldrb	r3, [r4, #1]
 8003c56:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c58:	d132      	bne.n	8003cc0 <_vfiprintf_r+0x1ac>
 8003c5a:	9b03      	ldr	r3, [sp, #12]
 8003c5c:	1d1a      	adds	r2, r3, #4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	9203      	str	r2, [sp, #12]
 8003c62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c66:	3402      	adds	r4, #2
 8003c68:	9305      	str	r3, [sp, #20]
 8003c6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003d40 <_vfiprintf_r+0x22c>
 8003c6e:	7821      	ldrb	r1, [r4, #0]
 8003c70:	2203      	movs	r2, #3
 8003c72:	4650      	mov	r0, sl
 8003c74:	f7fc fabc 	bl	80001f0 <memchr>
 8003c78:	b138      	cbz	r0, 8003c8a <_vfiprintf_r+0x176>
 8003c7a:	9b04      	ldr	r3, [sp, #16]
 8003c7c:	eba0 000a 	sub.w	r0, r0, sl
 8003c80:	2240      	movs	r2, #64	@ 0x40
 8003c82:	4082      	lsls	r2, r0
 8003c84:	4313      	orrs	r3, r2
 8003c86:	3401      	adds	r4, #1
 8003c88:	9304      	str	r3, [sp, #16]
 8003c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c8e:	4829      	ldr	r0, [pc, #164]	@ (8003d34 <_vfiprintf_r+0x220>)
 8003c90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c94:	2206      	movs	r2, #6
 8003c96:	f7fc faab 	bl	80001f0 <memchr>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d03f      	beq.n	8003d1e <_vfiprintf_r+0x20a>
 8003c9e:	4b26      	ldr	r3, [pc, #152]	@ (8003d38 <_vfiprintf_r+0x224>)
 8003ca0:	bb1b      	cbnz	r3, 8003cea <_vfiprintf_r+0x1d6>
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	3307      	adds	r3, #7
 8003ca6:	f023 0307 	bic.w	r3, r3, #7
 8003caa:	3308      	adds	r3, #8
 8003cac:	9303      	str	r3, [sp, #12]
 8003cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cb0:	443b      	add	r3, r7
 8003cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cb4:	e76a      	b.n	8003b8c <_vfiprintf_r+0x78>
 8003cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cba:	460c      	mov	r4, r1
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	e7a8      	b.n	8003c12 <_vfiprintf_r+0xfe>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	3401      	adds	r4, #1
 8003cc4:	9305      	str	r3, [sp, #20]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f04f 0c0a 	mov.w	ip, #10
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cd2:	3a30      	subs	r2, #48	@ 0x30
 8003cd4:	2a09      	cmp	r2, #9
 8003cd6:	d903      	bls.n	8003ce0 <_vfiprintf_r+0x1cc>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0c6      	beq.n	8003c6a <_vfiprintf_r+0x156>
 8003cdc:	9105      	str	r1, [sp, #20]
 8003cde:	e7c4      	b.n	8003c6a <_vfiprintf_r+0x156>
 8003ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e7f0      	b.n	8003ccc <_vfiprintf_r+0x1b8>
 8003cea:	ab03      	add	r3, sp, #12
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	462a      	mov	r2, r5
 8003cf0:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <_vfiprintf_r+0x228>)
 8003cf2:	a904      	add	r1, sp, #16
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f3af 8000 	nop.w
 8003cfa:	4607      	mov	r7, r0
 8003cfc:	1c78      	adds	r0, r7, #1
 8003cfe:	d1d6      	bne.n	8003cae <_vfiprintf_r+0x19a>
 8003d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d02:	07d9      	lsls	r1, r3, #31
 8003d04:	d405      	bmi.n	8003d12 <_vfiprintf_r+0x1fe>
 8003d06:	89ab      	ldrh	r3, [r5, #12]
 8003d08:	059a      	lsls	r2, r3, #22
 8003d0a:	d402      	bmi.n	8003d12 <_vfiprintf_r+0x1fe>
 8003d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d0e:	f7ff fddd 	bl	80038cc <__retarget_lock_release_recursive>
 8003d12:	89ab      	ldrh	r3, [r5, #12]
 8003d14:	065b      	lsls	r3, r3, #25
 8003d16:	f53f af1f 	bmi.w	8003b58 <_vfiprintf_r+0x44>
 8003d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d1c:	e71e      	b.n	8003b5c <_vfiprintf_r+0x48>
 8003d1e:	ab03      	add	r3, sp, #12
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	462a      	mov	r2, r5
 8003d24:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <_vfiprintf_r+0x228>)
 8003d26:	a904      	add	r1, sp, #16
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f000 f879 	bl	8003e20 <_printf_i>
 8003d2e:	e7e4      	b.n	8003cfa <_vfiprintf_r+0x1e6>
 8003d30:	080044a0 	.word	0x080044a0
 8003d34:	080044aa 	.word	0x080044aa
 8003d38:	00000000 	.word	0x00000000
 8003d3c:	08003aef 	.word	0x08003aef
 8003d40:	080044a6 	.word	0x080044a6

08003d44 <_printf_common>:
 8003d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	4616      	mov	r6, r2
 8003d4a:	4698      	mov	r8, r3
 8003d4c:	688a      	ldr	r2, [r1, #8]
 8003d4e:	690b      	ldr	r3, [r1, #16]
 8003d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d54:	4293      	cmp	r3, r2
 8003d56:	bfb8      	it	lt
 8003d58:	4613      	movlt	r3, r2
 8003d5a:	6033      	str	r3, [r6, #0]
 8003d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d60:	4607      	mov	r7, r0
 8003d62:	460c      	mov	r4, r1
 8003d64:	b10a      	cbz	r2, 8003d6a <_printf_common+0x26>
 8003d66:	3301      	adds	r3, #1
 8003d68:	6033      	str	r3, [r6, #0]
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	0699      	lsls	r1, r3, #26
 8003d6e:	bf42      	ittt	mi
 8003d70:	6833      	ldrmi	r3, [r6, #0]
 8003d72:	3302      	addmi	r3, #2
 8003d74:	6033      	strmi	r3, [r6, #0]
 8003d76:	6825      	ldr	r5, [r4, #0]
 8003d78:	f015 0506 	ands.w	r5, r5, #6
 8003d7c:	d106      	bne.n	8003d8c <_printf_common+0x48>
 8003d7e:	f104 0a19 	add.w	sl, r4, #25
 8003d82:	68e3      	ldr	r3, [r4, #12]
 8003d84:	6832      	ldr	r2, [r6, #0]
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	42ab      	cmp	r3, r5
 8003d8a:	dc26      	bgt.n	8003dda <_printf_common+0x96>
 8003d8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d90:	6822      	ldr	r2, [r4, #0]
 8003d92:	3b00      	subs	r3, #0
 8003d94:	bf18      	it	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	0692      	lsls	r2, r2, #26
 8003d9a:	d42b      	bmi.n	8003df4 <_printf_common+0xb0>
 8003d9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003da0:	4641      	mov	r1, r8
 8003da2:	4638      	mov	r0, r7
 8003da4:	47c8      	blx	r9
 8003da6:	3001      	adds	r0, #1
 8003da8:	d01e      	beq.n	8003de8 <_printf_common+0xa4>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	6922      	ldr	r2, [r4, #16]
 8003dae:	f003 0306 	and.w	r3, r3, #6
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	bf02      	ittt	eq
 8003db6:	68e5      	ldreq	r5, [r4, #12]
 8003db8:	6833      	ldreq	r3, [r6, #0]
 8003dba:	1aed      	subeq	r5, r5, r3
 8003dbc:	68a3      	ldr	r3, [r4, #8]
 8003dbe:	bf0c      	ite	eq
 8003dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dc4:	2500      	movne	r5, #0
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	bfc4      	itt	gt
 8003dca:	1a9b      	subgt	r3, r3, r2
 8003dcc:	18ed      	addgt	r5, r5, r3
 8003dce:	2600      	movs	r6, #0
 8003dd0:	341a      	adds	r4, #26
 8003dd2:	42b5      	cmp	r5, r6
 8003dd4:	d11a      	bne.n	8003e0c <_printf_common+0xc8>
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	e008      	b.n	8003dec <_printf_common+0xa8>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4652      	mov	r2, sl
 8003dde:	4641      	mov	r1, r8
 8003de0:	4638      	mov	r0, r7
 8003de2:	47c8      	blx	r9
 8003de4:	3001      	adds	r0, #1
 8003de6:	d103      	bne.n	8003df0 <_printf_common+0xac>
 8003de8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df0:	3501      	adds	r5, #1
 8003df2:	e7c6      	b.n	8003d82 <_printf_common+0x3e>
 8003df4:	18e1      	adds	r1, r4, r3
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	2030      	movs	r0, #48	@ 0x30
 8003dfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dfe:	4422      	add	r2, r4
 8003e00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e08:	3302      	adds	r3, #2
 8003e0a:	e7c7      	b.n	8003d9c <_printf_common+0x58>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	4622      	mov	r2, r4
 8003e10:	4641      	mov	r1, r8
 8003e12:	4638      	mov	r0, r7
 8003e14:	47c8      	blx	r9
 8003e16:	3001      	adds	r0, #1
 8003e18:	d0e6      	beq.n	8003de8 <_printf_common+0xa4>
 8003e1a:	3601      	adds	r6, #1
 8003e1c:	e7d9      	b.n	8003dd2 <_printf_common+0x8e>
	...

08003e20 <_printf_i>:
 8003e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e24:	7e0f      	ldrb	r7, [r1, #24]
 8003e26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e28:	2f78      	cmp	r7, #120	@ 0x78
 8003e2a:	4691      	mov	r9, r2
 8003e2c:	4680      	mov	r8, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	469a      	mov	sl, r3
 8003e32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e36:	d807      	bhi.n	8003e48 <_printf_i+0x28>
 8003e38:	2f62      	cmp	r7, #98	@ 0x62
 8003e3a:	d80a      	bhi.n	8003e52 <_printf_i+0x32>
 8003e3c:	2f00      	cmp	r7, #0
 8003e3e:	f000 80d1 	beq.w	8003fe4 <_printf_i+0x1c4>
 8003e42:	2f58      	cmp	r7, #88	@ 0x58
 8003e44:	f000 80b8 	beq.w	8003fb8 <_printf_i+0x198>
 8003e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e50:	e03a      	b.n	8003ec8 <_printf_i+0xa8>
 8003e52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e56:	2b15      	cmp	r3, #21
 8003e58:	d8f6      	bhi.n	8003e48 <_printf_i+0x28>
 8003e5a:	a101      	add	r1, pc, #4	@ (adr r1, 8003e60 <_printf_i+0x40>)
 8003e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e60:	08003eb9 	.word	0x08003eb9
 8003e64:	08003ecd 	.word	0x08003ecd
 8003e68:	08003e49 	.word	0x08003e49
 8003e6c:	08003e49 	.word	0x08003e49
 8003e70:	08003e49 	.word	0x08003e49
 8003e74:	08003e49 	.word	0x08003e49
 8003e78:	08003ecd 	.word	0x08003ecd
 8003e7c:	08003e49 	.word	0x08003e49
 8003e80:	08003e49 	.word	0x08003e49
 8003e84:	08003e49 	.word	0x08003e49
 8003e88:	08003e49 	.word	0x08003e49
 8003e8c:	08003fcb 	.word	0x08003fcb
 8003e90:	08003ef7 	.word	0x08003ef7
 8003e94:	08003f85 	.word	0x08003f85
 8003e98:	08003e49 	.word	0x08003e49
 8003e9c:	08003e49 	.word	0x08003e49
 8003ea0:	08003fed 	.word	0x08003fed
 8003ea4:	08003e49 	.word	0x08003e49
 8003ea8:	08003ef7 	.word	0x08003ef7
 8003eac:	08003e49 	.word	0x08003e49
 8003eb0:	08003e49 	.word	0x08003e49
 8003eb4:	08003f8d 	.word	0x08003f8d
 8003eb8:	6833      	ldr	r3, [r6, #0]
 8003eba:	1d1a      	adds	r2, r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6032      	str	r2, [r6, #0]
 8003ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e09c      	b.n	8004006 <_printf_i+0x1e6>
 8003ecc:	6833      	ldr	r3, [r6, #0]
 8003ece:	6820      	ldr	r0, [r4, #0]
 8003ed0:	1d19      	adds	r1, r3, #4
 8003ed2:	6031      	str	r1, [r6, #0]
 8003ed4:	0606      	lsls	r6, r0, #24
 8003ed6:	d501      	bpl.n	8003edc <_printf_i+0xbc>
 8003ed8:	681d      	ldr	r5, [r3, #0]
 8003eda:	e003      	b.n	8003ee4 <_printf_i+0xc4>
 8003edc:	0645      	lsls	r5, r0, #25
 8003ede:	d5fb      	bpl.n	8003ed8 <_printf_i+0xb8>
 8003ee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ee4:	2d00      	cmp	r5, #0
 8003ee6:	da03      	bge.n	8003ef0 <_printf_i+0xd0>
 8003ee8:	232d      	movs	r3, #45	@ 0x2d
 8003eea:	426d      	negs	r5, r5
 8003eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ef0:	4858      	ldr	r0, [pc, #352]	@ (8004054 <_printf_i+0x234>)
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	e011      	b.n	8003f1a <_printf_i+0xfa>
 8003ef6:	6821      	ldr	r1, [r4, #0]
 8003ef8:	6833      	ldr	r3, [r6, #0]
 8003efa:	0608      	lsls	r0, r1, #24
 8003efc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f00:	d402      	bmi.n	8003f08 <_printf_i+0xe8>
 8003f02:	0649      	lsls	r1, r1, #25
 8003f04:	bf48      	it	mi
 8003f06:	b2ad      	uxthmi	r5, r5
 8003f08:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f0a:	4852      	ldr	r0, [pc, #328]	@ (8004054 <_printf_i+0x234>)
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	bf14      	ite	ne
 8003f10:	230a      	movne	r3, #10
 8003f12:	2308      	moveq	r3, #8
 8003f14:	2100      	movs	r1, #0
 8003f16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f1a:	6866      	ldr	r6, [r4, #4]
 8003f1c:	60a6      	str	r6, [r4, #8]
 8003f1e:	2e00      	cmp	r6, #0
 8003f20:	db05      	blt.n	8003f2e <_printf_i+0x10e>
 8003f22:	6821      	ldr	r1, [r4, #0]
 8003f24:	432e      	orrs	r6, r5
 8003f26:	f021 0104 	bic.w	r1, r1, #4
 8003f2a:	6021      	str	r1, [r4, #0]
 8003f2c:	d04b      	beq.n	8003fc6 <_printf_i+0x1a6>
 8003f2e:	4616      	mov	r6, r2
 8003f30:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f34:	fb03 5711 	mls	r7, r3, r1, r5
 8003f38:	5dc7      	ldrb	r7, [r0, r7]
 8003f3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f3e:	462f      	mov	r7, r5
 8003f40:	42bb      	cmp	r3, r7
 8003f42:	460d      	mov	r5, r1
 8003f44:	d9f4      	bls.n	8003f30 <_printf_i+0x110>
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d10b      	bne.n	8003f62 <_printf_i+0x142>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	07df      	lsls	r7, r3, #31
 8003f4e:	d508      	bpl.n	8003f62 <_printf_i+0x142>
 8003f50:	6923      	ldr	r3, [r4, #16]
 8003f52:	6861      	ldr	r1, [r4, #4]
 8003f54:	4299      	cmp	r1, r3
 8003f56:	bfde      	ittt	le
 8003f58:	2330      	movle	r3, #48	@ 0x30
 8003f5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f62:	1b92      	subs	r2, r2, r6
 8003f64:	6122      	str	r2, [r4, #16]
 8003f66:	f8cd a000 	str.w	sl, [sp]
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	aa03      	add	r2, sp, #12
 8003f6e:	4621      	mov	r1, r4
 8003f70:	4640      	mov	r0, r8
 8003f72:	f7ff fee7 	bl	8003d44 <_printf_common>
 8003f76:	3001      	adds	r0, #1
 8003f78:	d14a      	bne.n	8004010 <_printf_i+0x1f0>
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7e:	b004      	add	sp, #16
 8003f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	f043 0320 	orr.w	r3, r3, #32
 8003f8a:	6023      	str	r3, [r4, #0]
 8003f8c:	4832      	ldr	r0, [pc, #200]	@ (8004058 <_printf_i+0x238>)
 8003f8e:	2778      	movs	r7, #120	@ 0x78
 8003f90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	6831      	ldr	r1, [r6, #0]
 8003f98:	061f      	lsls	r7, r3, #24
 8003f9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f9e:	d402      	bmi.n	8003fa6 <_printf_i+0x186>
 8003fa0:	065f      	lsls	r7, r3, #25
 8003fa2:	bf48      	it	mi
 8003fa4:	b2ad      	uxthmi	r5, r5
 8003fa6:	6031      	str	r1, [r6, #0]
 8003fa8:	07d9      	lsls	r1, r3, #31
 8003faa:	bf44      	itt	mi
 8003fac:	f043 0320 	orrmi.w	r3, r3, #32
 8003fb0:	6023      	strmi	r3, [r4, #0]
 8003fb2:	b11d      	cbz	r5, 8003fbc <_printf_i+0x19c>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	e7ad      	b.n	8003f14 <_printf_i+0xf4>
 8003fb8:	4826      	ldr	r0, [pc, #152]	@ (8004054 <_printf_i+0x234>)
 8003fba:	e7e9      	b.n	8003f90 <_printf_i+0x170>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	f023 0320 	bic.w	r3, r3, #32
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	e7f6      	b.n	8003fb4 <_printf_i+0x194>
 8003fc6:	4616      	mov	r6, r2
 8003fc8:	e7bd      	b.n	8003f46 <_printf_i+0x126>
 8003fca:	6833      	ldr	r3, [r6, #0]
 8003fcc:	6825      	ldr	r5, [r4, #0]
 8003fce:	6961      	ldr	r1, [r4, #20]
 8003fd0:	1d18      	adds	r0, r3, #4
 8003fd2:	6030      	str	r0, [r6, #0]
 8003fd4:	062e      	lsls	r6, r5, #24
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	d501      	bpl.n	8003fde <_printf_i+0x1be>
 8003fda:	6019      	str	r1, [r3, #0]
 8003fdc:	e002      	b.n	8003fe4 <_printf_i+0x1c4>
 8003fde:	0668      	lsls	r0, r5, #25
 8003fe0:	d5fb      	bpl.n	8003fda <_printf_i+0x1ba>
 8003fe2:	8019      	strh	r1, [r3, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6123      	str	r3, [r4, #16]
 8003fe8:	4616      	mov	r6, r2
 8003fea:	e7bc      	b.n	8003f66 <_printf_i+0x146>
 8003fec:	6833      	ldr	r3, [r6, #0]
 8003fee:	1d1a      	adds	r2, r3, #4
 8003ff0:	6032      	str	r2, [r6, #0]
 8003ff2:	681e      	ldr	r6, [r3, #0]
 8003ff4:	6862      	ldr	r2, [r4, #4]
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f7fc f8f9 	bl	80001f0 <memchr>
 8003ffe:	b108      	cbz	r0, 8004004 <_printf_i+0x1e4>
 8004000:	1b80      	subs	r0, r0, r6
 8004002:	6060      	str	r0, [r4, #4]
 8004004:	6863      	ldr	r3, [r4, #4]
 8004006:	6123      	str	r3, [r4, #16]
 8004008:	2300      	movs	r3, #0
 800400a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800400e:	e7aa      	b.n	8003f66 <_printf_i+0x146>
 8004010:	6923      	ldr	r3, [r4, #16]
 8004012:	4632      	mov	r2, r6
 8004014:	4649      	mov	r1, r9
 8004016:	4640      	mov	r0, r8
 8004018:	47d0      	blx	sl
 800401a:	3001      	adds	r0, #1
 800401c:	d0ad      	beq.n	8003f7a <_printf_i+0x15a>
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	079b      	lsls	r3, r3, #30
 8004022:	d413      	bmi.n	800404c <_printf_i+0x22c>
 8004024:	68e0      	ldr	r0, [r4, #12]
 8004026:	9b03      	ldr	r3, [sp, #12]
 8004028:	4298      	cmp	r0, r3
 800402a:	bfb8      	it	lt
 800402c:	4618      	movlt	r0, r3
 800402e:	e7a6      	b.n	8003f7e <_printf_i+0x15e>
 8004030:	2301      	movs	r3, #1
 8004032:	4632      	mov	r2, r6
 8004034:	4649      	mov	r1, r9
 8004036:	4640      	mov	r0, r8
 8004038:	47d0      	blx	sl
 800403a:	3001      	adds	r0, #1
 800403c:	d09d      	beq.n	8003f7a <_printf_i+0x15a>
 800403e:	3501      	adds	r5, #1
 8004040:	68e3      	ldr	r3, [r4, #12]
 8004042:	9903      	ldr	r1, [sp, #12]
 8004044:	1a5b      	subs	r3, r3, r1
 8004046:	42ab      	cmp	r3, r5
 8004048:	dcf2      	bgt.n	8004030 <_printf_i+0x210>
 800404a:	e7eb      	b.n	8004024 <_printf_i+0x204>
 800404c:	2500      	movs	r5, #0
 800404e:	f104 0619 	add.w	r6, r4, #25
 8004052:	e7f5      	b.n	8004040 <_printf_i+0x220>
 8004054:	080044b1 	.word	0x080044b1
 8004058:	080044c2 	.word	0x080044c2

0800405c <__sflush_r>:
 800405c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004064:	0716      	lsls	r6, r2, #28
 8004066:	4605      	mov	r5, r0
 8004068:	460c      	mov	r4, r1
 800406a:	d454      	bmi.n	8004116 <__sflush_r+0xba>
 800406c:	684b      	ldr	r3, [r1, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	dc02      	bgt.n	8004078 <__sflush_r+0x1c>
 8004072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	dd48      	ble.n	800410a <__sflush_r+0xae>
 8004078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800407a:	2e00      	cmp	r6, #0
 800407c:	d045      	beq.n	800410a <__sflush_r+0xae>
 800407e:	2300      	movs	r3, #0
 8004080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004084:	682f      	ldr	r7, [r5, #0]
 8004086:	6a21      	ldr	r1, [r4, #32]
 8004088:	602b      	str	r3, [r5, #0]
 800408a:	d030      	beq.n	80040ee <__sflush_r+0x92>
 800408c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	0759      	lsls	r1, r3, #29
 8004092:	d505      	bpl.n	80040a0 <__sflush_r+0x44>
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	1ad2      	subs	r2, r2, r3
 8004098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800409a:	b10b      	cbz	r3, 80040a0 <__sflush_r+0x44>
 800409c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800409e:	1ad2      	subs	r2, r2, r3
 80040a0:	2300      	movs	r3, #0
 80040a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040a4:	6a21      	ldr	r1, [r4, #32]
 80040a6:	4628      	mov	r0, r5
 80040a8:	47b0      	blx	r6
 80040aa:	1c43      	adds	r3, r0, #1
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	d106      	bne.n	80040be <__sflush_r+0x62>
 80040b0:	6829      	ldr	r1, [r5, #0]
 80040b2:	291d      	cmp	r1, #29
 80040b4:	d82b      	bhi.n	800410e <__sflush_r+0xb2>
 80040b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004160 <__sflush_r+0x104>)
 80040b8:	40ca      	lsrs	r2, r1
 80040ba:	07d6      	lsls	r6, r2, #31
 80040bc:	d527      	bpl.n	800410e <__sflush_r+0xb2>
 80040be:	2200      	movs	r2, #0
 80040c0:	6062      	str	r2, [r4, #4]
 80040c2:	04d9      	lsls	r1, r3, #19
 80040c4:	6922      	ldr	r2, [r4, #16]
 80040c6:	6022      	str	r2, [r4, #0]
 80040c8:	d504      	bpl.n	80040d4 <__sflush_r+0x78>
 80040ca:	1c42      	adds	r2, r0, #1
 80040cc:	d101      	bne.n	80040d2 <__sflush_r+0x76>
 80040ce:	682b      	ldr	r3, [r5, #0]
 80040d0:	b903      	cbnz	r3, 80040d4 <__sflush_r+0x78>
 80040d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80040d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040d6:	602f      	str	r7, [r5, #0]
 80040d8:	b1b9      	cbz	r1, 800410a <__sflush_r+0xae>
 80040da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040de:	4299      	cmp	r1, r3
 80040e0:	d002      	beq.n	80040e8 <__sflush_r+0x8c>
 80040e2:	4628      	mov	r0, r5
 80040e4:	f7ff fbf4 	bl	80038d0 <_free_r>
 80040e8:	2300      	movs	r3, #0
 80040ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80040ec:	e00d      	b.n	800410a <__sflush_r+0xae>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b0      	blx	r6
 80040f4:	4602      	mov	r2, r0
 80040f6:	1c50      	adds	r0, r2, #1
 80040f8:	d1c9      	bne.n	800408e <__sflush_r+0x32>
 80040fa:	682b      	ldr	r3, [r5, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0c6      	beq.n	800408e <__sflush_r+0x32>
 8004100:	2b1d      	cmp	r3, #29
 8004102:	d001      	beq.n	8004108 <__sflush_r+0xac>
 8004104:	2b16      	cmp	r3, #22
 8004106:	d11e      	bne.n	8004146 <__sflush_r+0xea>
 8004108:	602f      	str	r7, [r5, #0]
 800410a:	2000      	movs	r0, #0
 800410c:	e022      	b.n	8004154 <__sflush_r+0xf8>
 800410e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004112:	b21b      	sxth	r3, r3
 8004114:	e01b      	b.n	800414e <__sflush_r+0xf2>
 8004116:	690f      	ldr	r7, [r1, #16]
 8004118:	2f00      	cmp	r7, #0
 800411a:	d0f6      	beq.n	800410a <__sflush_r+0xae>
 800411c:	0793      	lsls	r3, r2, #30
 800411e:	680e      	ldr	r6, [r1, #0]
 8004120:	bf08      	it	eq
 8004122:	694b      	ldreq	r3, [r1, #20]
 8004124:	600f      	str	r7, [r1, #0]
 8004126:	bf18      	it	ne
 8004128:	2300      	movne	r3, #0
 800412a:	eba6 0807 	sub.w	r8, r6, r7
 800412e:	608b      	str	r3, [r1, #8]
 8004130:	f1b8 0f00 	cmp.w	r8, #0
 8004134:	dde9      	ble.n	800410a <__sflush_r+0xae>
 8004136:	6a21      	ldr	r1, [r4, #32]
 8004138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800413a:	4643      	mov	r3, r8
 800413c:	463a      	mov	r2, r7
 800413e:	4628      	mov	r0, r5
 8004140:	47b0      	blx	r6
 8004142:	2800      	cmp	r0, #0
 8004144:	dc08      	bgt.n	8004158 <__sflush_r+0xfc>
 8004146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800414a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004158:	4407      	add	r7, r0
 800415a:	eba8 0800 	sub.w	r8, r8, r0
 800415e:	e7e7      	b.n	8004130 <__sflush_r+0xd4>
 8004160:	20400001 	.word	0x20400001

08004164 <_fflush_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	690b      	ldr	r3, [r1, #16]
 8004168:	4605      	mov	r5, r0
 800416a:	460c      	mov	r4, r1
 800416c:	b913      	cbnz	r3, 8004174 <_fflush_r+0x10>
 800416e:	2500      	movs	r5, #0
 8004170:	4628      	mov	r0, r5
 8004172:	bd38      	pop	{r3, r4, r5, pc}
 8004174:	b118      	cbz	r0, 800417e <_fflush_r+0x1a>
 8004176:	6a03      	ldr	r3, [r0, #32]
 8004178:	b90b      	cbnz	r3, 800417e <_fflush_r+0x1a>
 800417a:	f7ff faa1 	bl	80036c0 <__sinit>
 800417e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f3      	beq.n	800416e <_fflush_r+0xa>
 8004186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004188:	07d0      	lsls	r0, r2, #31
 800418a:	d404      	bmi.n	8004196 <_fflush_r+0x32>
 800418c:	0599      	lsls	r1, r3, #22
 800418e:	d402      	bmi.n	8004196 <_fflush_r+0x32>
 8004190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004192:	f7ff fb9a 	bl	80038ca <__retarget_lock_acquire_recursive>
 8004196:	4628      	mov	r0, r5
 8004198:	4621      	mov	r1, r4
 800419a:	f7ff ff5f 	bl	800405c <__sflush_r>
 800419e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041a0:	07da      	lsls	r2, r3, #31
 80041a2:	4605      	mov	r5, r0
 80041a4:	d4e4      	bmi.n	8004170 <_fflush_r+0xc>
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	059b      	lsls	r3, r3, #22
 80041aa:	d4e1      	bmi.n	8004170 <_fflush_r+0xc>
 80041ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041ae:	f7ff fb8d 	bl	80038cc <__retarget_lock_release_recursive>
 80041b2:	e7dd      	b.n	8004170 <_fflush_r+0xc>

080041b4 <__swbuf_r>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	460e      	mov	r6, r1
 80041b8:	4614      	mov	r4, r2
 80041ba:	4605      	mov	r5, r0
 80041bc:	b118      	cbz	r0, 80041c6 <__swbuf_r+0x12>
 80041be:	6a03      	ldr	r3, [r0, #32]
 80041c0:	b90b      	cbnz	r3, 80041c6 <__swbuf_r+0x12>
 80041c2:	f7ff fa7d 	bl	80036c0 <__sinit>
 80041c6:	69a3      	ldr	r3, [r4, #24]
 80041c8:	60a3      	str	r3, [r4, #8]
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	071a      	lsls	r2, r3, #28
 80041ce:	d501      	bpl.n	80041d4 <__swbuf_r+0x20>
 80041d0:	6923      	ldr	r3, [r4, #16]
 80041d2:	b943      	cbnz	r3, 80041e6 <__swbuf_r+0x32>
 80041d4:	4621      	mov	r1, r4
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 f82a 	bl	8004230 <__swsetup_r>
 80041dc:	b118      	cbz	r0, 80041e6 <__swbuf_r+0x32>
 80041de:	f04f 37ff 	mov.w	r7, #4294967295
 80041e2:	4638      	mov	r0, r7
 80041e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	6922      	ldr	r2, [r4, #16]
 80041ea:	1a98      	subs	r0, r3, r2
 80041ec:	6963      	ldr	r3, [r4, #20]
 80041ee:	b2f6      	uxtb	r6, r6
 80041f0:	4283      	cmp	r3, r0
 80041f2:	4637      	mov	r7, r6
 80041f4:	dc05      	bgt.n	8004202 <__swbuf_r+0x4e>
 80041f6:	4621      	mov	r1, r4
 80041f8:	4628      	mov	r0, r5
 80041fa:	f7ff ffb3 	bl	8004164 <_fflush_r>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d1ed      	bne.n	80041de <__swbuf_r+0x2a>
 8004202:	68a3      	ldr	r3, [r4, #8]
 8004204:	3b01      	subs	r3, #1
 8004206:	60a3      	str	r3, [r4, #8]
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	6022      	str	r2, [r4, #0]
 800420e:	701e      	strb	r6, [r3, #0]
 8004210:	6962      	ldr	r2, [r4, #20]
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	429a      	cmp	r2, r3
 8004216:	d004      	beq.n	8004222 <__swbuf_r+0x6e>
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	07db      	lsls	r3, r3, #31
 800421c:	d5e1      	bpl.n	80041e2 <__swbuf_r+0x2e>
 800421e:	2e0a      	cmp	r6, #10
 8004220:	d1df      	bne.n	80041e2 <__swbuf_r+0x2e>
 8004222:	4621      	mov	r1, r4
 8004224:	4628      	mov	r0, r5
 8004226:	f7ff ff9d 	bl	8004164 <_fflush_r>
 800422a:	2800      	cmp	r0, #0
 800422c:	d0d9      	beq.n	80041e2 <__swbuf_r+0x2e>
 800422e:	e7d6      	b.n	80041de <__swbuf_r+0x2a>

08004230 <__swsetup_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4b29      	ldr	r3, [pc, #164]	@ (80042d8 <__swsetup_r+0xa8>)
 8004234:	4605      	mov	r5, r0
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	460c      	mov	r4, r1
 800423a:	b118      	cbz	r0, 8004244 <__swsetup_r+0x14>
 800423c:	6a03      	ldr	r3, [r0, #32]
 800423e:	b90b      	cbnz	r3, 8004244 <__swsetup_r+0x14>
 8004240:	f7ff fa3e 	bl	80036c0 <__sinit>
 8004244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004248:	0719      	lsls	r1, r3, #28
 800424a:	d422      	bmi.n	8004292 <__swsetup_r+0x62>
 800424c:	06da      	lsls	r2, r3, #27
 800424e:	d407      	bmi.n	8004260 <__swsetup_r+0x30>
 8004250:	2209      	movs	r2, #9
 8004252:	602a      	str	r2, [r5, #0]
 8004254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	f04f 30ff 	mov.w	r0, #4294967295
 800425e:	e033      	b.n	80042c8 <__swsetup_r+0x98>
 8004260:	0758      	lsls	r0, r3, #29
 8004262:	d512      	bpl.n	800428a <__swsetup_r+0x5a>
 8004264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004266:	b141      	cbz	r1, 800427a <__swsetup_r+0x4a>
 8004268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800426c:	4299      	cmp	r1, r3
 800426e:	d002      	beq.n	8004276 <__swsetup_r+0x46>
 8004270:	4628      	mov	r0, r5
 8004272:	f7ff fb2d 	bl	80038d0 <_free_r>
 8004276:	2300      	movs	r3, #0
 8004278:	6363      	str	r3, [r4, #52]	@ 0x34
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004280:	81a3      	strh	r3, [r4, #12]
 8004282:	2300      	movs	r3, #0
 8004284:	6063      	str	r3, [r4, #4]
 8004286:	6923      	ldr	r3, [r4, #16]
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	f043 0308 	orr.w	r3, r3, #8
 8004290:	81a3      	strh	r3, [r4, #12]
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	b94b      	cbnz	r3, 80042aa <__swsetup_r+0x7a>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800429c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a0:	d003      	beq.n	80042aa <__swsetup_r+0x7a>
 80042a2:	4621      	mov	r1, r4
 80042a4:	4628      	mov	r0, r5
 80042a6:	f000 f84f 	bl	8004348 <__smakebuf_r>
 80042aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ae:	f013 0201 	ands.w	r2, r3, #1
 80042b2:	d00a      	beq.n	80042ca <__swsetup_r+0x9a>
 80042b4:	2200      	movs	r2, #0
 80042b6:	60a2      	str	r2, [r4, #8]
 80042b8:	6962      	ldr	r2, [r4, #20]
 80042ba:	4252      	negs	r2, r2
 80042bc:	61a2      	str	r2, [r4, #24]
 80042be:	6922      	ldr	r2, [r4, #16]
 80042c0:	b942      	cbnz	r2, 80042d4 <__swsetup_r+0xa4>
 80042c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042c6:	d1c5      	bne.n	8004254 <__swsetup_r+0x24>
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
 80042ca:	0799      	lsls	r1, r3, #30
 80042cc:	bf58      	it	pl
 80042ce:	6962      	ldrpl	r2, [r4, #20]
 80042d0:	60a2      	str	r2, [r4, #8]
 80042d2:	e7f4      	b.n	80042be <__swsetup_r+0x8e>
 80042d4:	2000      	movs	r0, #0
 80042d6:	e7f7      	b.n	80042c8 <__swsetup_r+0x98>
 80042d8:	20000018 	.word	0x20000018

080042dc <_sbrk_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4d06      	ldr	r5, [pc, #24]	@ (80042f8 <_sbrk_r+0x1c>)
 80042e0:	2300      	movs	r3, #0
 80042e2:	4604      	mov	r4, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	f7fc fc24 	bl	8000b34 <_sbrk>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_sbrk_r+0x1a>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_sbrk_r+0x1a>
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	200002ac 	.word	0x200002ac

080042fc <__swhatbuf_r>:
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	460c      	mov	r4, r1
 8004300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004304:	2900      	cmp	r1, #0
 8004306:	b096      	sub	sp, #88	@ 0x58
 8004308:	4615      	mov	r5, r2
 800430a:	461e      	mov	r6, r3
 800430c:	da0d      	bge.n	800432a <__swhatbuf_r+0x2e>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	bf14      	ite	ne
 800431a:	2340      	movne	r3, #64	@ 0x40
 800431c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004320:	2000      	movs	r0, #0
 8004322:	6031      	str	r1, [r6, #0]
 8004324:	602b      	str	r3, [r5, #0]
 8004326:	b016      	add	sp, #88	@ 0x58
 8004328:	bd70      	pop	{r4, r5, r6, pc}
 800432a:	466a      	mov	r2, sp
 800432c:	f000 f848 	bl	80043c0 <_fstat_r>
 8004330:	2800      	cmp	r0, #0
 8004332:	dbec      	blt.n	800430e <__swhatbuf_r+0x12>
 8004334:	9901      	ldr	r1, [sp, #4]
 8004336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800433a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800433e:	4259      	negs	r1, r3
 8004340:	4159      	adcs	r1, r3
 8004342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004346:	e7eb      	b.n	8004320 <__swhatbuf_r+0x24>

08004348 <__smakebuf_r>:
 8004348:	898b      	ldrh	r3, [r1, #12]
 800434a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800434c:	079d      	lsls	r5, r3, #30
 800434e:	4606      	mov	r6, r0
 8004350:	460c      	mov	r4, r1
 8004352:	d507      	bpl.n	8004364 <__smakebuf_r+0x1c>
 8004354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	2301      	movs	r3, #1
 800435e:	6163      	str	r3, [r4, #20]
 8004360:	b003      	add	sp, #12
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004364:	ab01      	add	r3, sp, #4
 8004366:	466a      	mov	r2, sp
 8004368:	f7ff ffc8 	bl	80042fc <__swhatbuf_r>
 800436c:	9f00      	ldr	r7, [sp, #0]
 800436e:	4605      	mov	r5, r0
 8004370:	4639      	mov	r1, r7
 8004372:	4630      	mov	r0, r6
 8004374:	f7ff fb18 	bl	80039a8 <_malloc_r>
 8004378:	b948      	cbnz	r0, 800438e <__smakebuf_r+0x46>
 800437a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437e:	059a      	lsls	r2, r3, #22
 8004380:	d4ee      	bmi.n	8004360 <__smakebuf_r+0x18>
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	f043 0302 	orr.w	r3, r3, #2
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	e7e2      	b.n	8004354 <__smakebuf_r+0xc>
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	6020      	str	r0, [r4, #0]
 8004392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	9b01      	ldr	r3, [sp, #4]
 800439a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800439e:	b15b      	cbz	r3, 80043b8 <__smakebuf_r+0x70>
 80043a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a4:	4630      	mov	r0, r6
 80043a6:	f000 f81d 	bl	80043e4 <_isatty_r>
 80043aa:	b128      	cbz	r0, 80043b8 <__smakebuf_r+0x70>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	81a3      	strh	r3, [r4, #12]
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	431d      	orrs	r5, r3
 80043bc:	81a5      	strh	r5, [r4, #12]
 80043be:	e7cf      	b.n	8004360 <__smakebuf_r+0x18>

080043c0 <_fstat_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4d07      	ldr	r5, [pc, #28]	@ (80043e0 <_fstat_r+0x20>)
 80043c4:	2300      	movs	r3, #0
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	602b      	str	r3, [r5, #0]
 80043ce:	f7fc fb89 	bl	8000ae4 <_fstat>
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	d102      	bne.n	80043dc <_fstat_r+0x1c>
 80043d6:	682b      	ldr	r3, [r5, #0]
 80043d8:	b103      	cbz	r3, 80043dc <_fstat_r+0x1c>
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	bd38      	pop	{r3, r4, r5, pc}
 80043de:	bf00      	nop
 80043e0:	200002ac 	.word	0x200002ac

080043e4 <_isatty_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4d06      	ldr	r5, [pc, #24]	@ (8004400 <_isatty_r+0x1c>)
 80043e8:	2300      	movs	r3, #0
 80043ea:	4604      	mov	r4, r0
 80043ec:	4608      	mov	r0, r1
 80043ee:	602b      	str	r3, [r5, #0]
 80043f0:	f7fc fb88 	bl	8000b04 <_isatty>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	d102      	bne.n	80043fe <_isatty_r+0x1a>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	b103      	cbz	r3, 80043fe <_isatty_r+0x1a>
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	bd38      	pop	{r3, r4, r5, pc}
 8004400:	200002ac 	.word	0x200002ac

08004404 <_init>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	bf00      	nop
 8004408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440a:	bc08      	pop	{r3}
 800440c:	469e      	mov	lr, r3
 800440e:	4770      	bx	lr

08004410 <_fini>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	bf00      	nop
 8004414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004416:	bc08      	pop	{r3}
 8004418:	469e      	mov	lr, r3
 800441a:	4770      	bx	lr
